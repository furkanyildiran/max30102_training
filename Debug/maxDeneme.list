
maxDeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000008  08004950  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  20000018  08004960  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000130  08004960  00020130  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e87c  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002478  00000000  00000000  0002e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013d8  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001300  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002167e  00000000  00000000  00033418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000fe6f  00000000  00000000  00054a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d2a0d  00000000  00000000  00064905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00137312  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005230  00000000  00000000  00137364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	0800486c 	.word	0x0800486c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	0800486c 	.word	0x0800486c

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2f>:
 8000918:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800091c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000920:	bf24      	itt	cs
 8000922:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000926:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092a:	d90d      	bls.n	8000948 <__aeabi_d2f+0x30>
 800092c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000930:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000934:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000938:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800093c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000940:	bf08      	it	eq
 8000942:	f020 0001 	biceq.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800094c:	d121      	bne.n	8000992 <__aeabi_d2f+0x7a>
 800094e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000952:	bfbc      	itt	lt
 8000954:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000958:	4770      	bxlt	lr
 800095a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000962:	f1c2 0218 	rsb	r2, r2, #24
 8000966:	f1c2 0c20 	rsb	ip, r2, #32
 800096a:	fa10 f30c 	lsls.w	r3, r0, ip
 800096e:	fa20 f002 	lsr.w	r0, r0, r2
 8000972:	bf18      	it	ne
 8000974:	f040 0001 	orrne.w	r0, r0, #1
 8000978:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000980:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000984:	ea40 000c 	orr.w	r0, r0, ip
 8000988:	fa23 f302 	lsr.w	r3, r3, r2
 800098c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000990:	e7cc      	b.n	800092c <__aeabi_d2f+0x14>
 8000992:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000996:	d107      	bne.n	80009a8 <__aeabi_d2f+0x90>
 8000998:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800099c:	bf1e      	ittt	ne
 800099e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a6:	4770      	bxne	lr
 80009a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ffc2 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a74:	68fb      	ldr	r3, [r7, #12]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f000 faaf 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8e:	f000 f8b5 	bl	8000bfc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a92:	f000 f90b 	bl	8000cac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 f965 	bl	8000d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a9a:	f000 f925 	bl	8000ce8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SysTick_Config(SystemCoreClock/1000);
 8000a9e:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <main+0x14c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <main+0x150>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	099b      	lsrs	r3, r3, #6
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffae 	bl	8000a0c <SysTick_Config>
  I2C1_init(&hi2c1);
 8000ab0:	4849      	ldr	r0, [pc, #292]	; (8000bd8 <main+0x154>)
 8000ab2:	f003 f91f 	bl	8003cf4 <I2C1_init>
  MAX30102_begin();
 8000ab6:	f003 faf9 	bl	80040ac <MAX30102_begin>
  MAX30102_setup(0x1F, 4, 2, 400, 411, 4096);
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f240 139b 	movw	r3, #411	; 0x19b
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aca:	2202      	movs	r2, #2
 8000acc:	2104      	movs	r1, #4
 8000ace:	201f      	movs	r0, #31
 8000ad0:	f003 fc20 	bl	8004314 <MAX30102_setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1){
		  uint32_t irValue = MAX30102_getIR();
 8000ad4:	f003 fd1e 	bl	8004514 <MAX30102_getIR>
 8000ad8:	6138      	str	r0, [r7, #16]

		  if(checkForBeat(irValue) == 1)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f97f 	bl	8003de0 <checkForBeat>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1f5      	bne.n	8000ad4 <main+0x50>
		  {
			  //We sensed a beat!
			  long delta = HAL_GetTick() - lastBeat;
 8000ae8:	f000 faee 	bl	80010c8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <main+0x158>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	60fb      	str	r3, [r7, #12]
			  lastBeat = HAL_GetTick();
 8000af6:	f000 fae7 	bl	80010c8 <HAL_GetTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <main+0x158>)
 8000afe:	6013      	str	r3, [r2, #0]

			  beatsPerMinute = 60 / (delta / 1000.0);
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff fc8d 	bl	8000420 <__aeabi_i2d>
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <main+0x15c>)
 8000b0c:	f7ff fe1c 	bl	8000748 <__aeabi_ddiv>
 8000b10:	4602      	mov	r2, r0
 8000b12:	460b      	mov	r3, r1
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4932      	ldr	r1, [pc, #200]	; (8000be4 <main+0x160>)
 8000b1a:	f7ff fe15 	bl	8000748 <__aeabi_ddiv>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	4610      	mov	r0, r2
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff fef7 	bl	8000918 <__aeabi_d2f>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <main+0x164>)
 8000b2e:	6013      	str	r3, [r2, #0]

			  if (beatsPerMinute < 255 && beatsPerMinute > 20)
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <main+0x164>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000bec <main+0x168>
 8000b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	d543      	bpl.n	8000bcc <main+0x148>
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <main+0x164>)
 8000b46:	edd3 7a00 	vldr	s15, [r3]
 8000b4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b56:	dd39      	ble.n	8000bcc <main+0x148>
			  {
				  rates[rateSpot++] = (uint8_t)beatsPerMinute; //Store this reading in the array
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <main+0x164>)
 8000b5a:	edd3 7a00 	vldr	s15, [r3]
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <main+0x16c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	b2d1      	uxtb	r1, r2
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <main+0x16c>)
 8000b68:	7011      	strb	r1, [r2, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b70:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b74:	793b      	ldrb	r3, [r7, #4]
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <main+0x170>)
 8000b7a:	5499      	strb	r1, [r3, r2]
				  rateSpot %= RATE_SIZE; //Wrap variable
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <main+0x16c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2204      	movs	r2, #4
 8000b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b86:	fb01 f202 	mul.w	r2, r1, r2
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <main+0x16c>)
 8000b90:	701a      	strb	r2, [r3, #0]
				  //Take average of readings
				  beatAvg = 0;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <main+0x174>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
				  for (uint8_t x = 0 ; x < RATE_SIZE ; x++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	75fb      	strb	r3, [r7, #23]
 8000b9c:	e00b      	b.n	8000bb6 <main+0x132>
					  beatAvg += rates[x];
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <main+0x170>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <main+0x174>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <main+0x174>)
 8000bae:	6013      	str	r3, [r2, #0]
				  for (uint8_t x = 0 ; x < RATE_SIZE ; x++)
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	75fb      	strb	r3, [r7, #23]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d3ef      	bcc.n	8000b9e <main+0x11a>
				  beatAvg /= RATE_SIZE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <main+0x174>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <main+0x174>)
 8000bca:	6013      	str	r3, [r2, #0]
	  while(1){
 8000bcc:	e782      	b.n	8000ad4 <main+0x50>
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	10624dd3 	.word	0x10624dd3
 8000bd8:	20000034 	.word	0x20000034
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	408f4000 	.word	0x408f4000
 8000be4:	404e0000 	.word	0x404e0000
 8000be8:	20000094 	.word	0x20000094
 8000bec:	437f0000 	.word	0x437f0000
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	20000088 	.word	0x20000088
 8000bf8:	20000098 	.word	0x20000098

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b09a      	sub	sp, #104	; 0x68
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2248      	movs	r2, #72	; 0x48
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fe26 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <SystemClock_Config+0xac>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <SystemClock_Config+0xac>)
 8000c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <SystemClock_Config+0xac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000c3e:	2322      	movs	r3, #34	; 0x22
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c54:	2360      	movs	r3, #96	; 0x60
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fe39 	bl	80028d8 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c6c:	f000 f881 	bl	8000d72 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c70:	236f      	movs	r3, #111	; 0x6f
 8000c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 f995 	bl	8002fc0 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c9c:	f000 f869 	bl	8000d72 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3768      	adds	r7, #104	; 0x68
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58000400 	.word	0x58000400

08000cac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2250      	movs	r2, #80	; 0x50
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fdcf 	bl	800485c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fd89 	bl	80037e6 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000cda:	f000 f84a 	bl	8000d72 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <MX_I2C1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000007;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d24:	f000 fc60 	bl	80015e8 <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 f820 	bl	8000d72 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d36:	f001 f9bb 	bl	80020b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f817 	bl	8000d72 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d48:	f001 f9fd 	bl	8002146 <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f80e 	bl	8000d72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000034 	.word	0x20000034
 8000d60:	40005400 	.word	0x40005400

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fe71 	bl	8000a50 <LL_AHB2_GRP1_EnableClock>

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d76:	b672      	cpsid	i
}
 8000d78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <Error_Handler+0x8>

08000d7c <LL_AHB2_GRP1_EnableClock>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09c      	sub	sp, #112	; 0x70
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2250      	movs	r2, #80	; 0x50
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fd23 	bl	800485c <memset>
  if(hi2c->Instance==I2C1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d126      	bne.n	8000e6e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e20:	2304      	movs	r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e24:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fcd9 	bl	80037e6 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e3a:	f7ff ff9a 	bl	8000d72 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff ff9c 	bl	8000d7c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4a:	2312      	movs	r3, #18
 8000e4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e56:	2304      	movs	r3, #4
 8000e58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0x8c>)
 8000e62:	f000 fa51 	bl	8001308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e66:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e6a:	f7ff ffa0 	bl	8000dae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3770      	adds	r7, #112	; 0x70
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	48000400 	.word	0x48000400

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f8e8 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <SystemInit+0x98>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <SystemInit+0x98>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f00:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <SystemInit+0x9c>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1e:	f023 0305 	bic.w	r3, r3, #5
 8000f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <SystemInit+0xa0>)
 8000f40:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <SystemInit+0xa0>)
 8000f48:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	faf6fefb 	.word	0xfaf6fefb
 8000f74:	22041000 	.word	0x22041000

08000f78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7c:	3304      	adds	r3, #4

08000f7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f82:	d3f9      	bcc.n	8000f78 <CopyDataInit>
  bx lr
 8000f84:	4770      	bx	lr

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f88:	3004      	adds	r0, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>
  bx lr
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff ff9e 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopForever+0x6>)
 8000f9a:	490c      	ldr	r1, [pc, #48]	; (8000fcc <LoopForever+0xa>)
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <LoopForever+0xe>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f7ff ffed 	bl	8000f7e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <LoopForever+0x16>)
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <LoopForever+0x1a>)
 8000faa:	2300      	movs	r3, #0
 8000fac:	f7ff ffe7 	bl	8000f7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopForever+0x1e>)
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <LoopForever+0x22>)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f7ff ffe8 	bl	8000f8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fba:	f003 fc2b 	bl	8004814 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fbe:	f7ff fd61 	bl	8000a84 <main>

08000fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000018 	.word	0x20000018
 8000fd0:	08004950 	.word	0x08004950
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fd4:	20030000 	.word	0x20030000
 8000fd8:	20030000 	.word	0x20030000
 8000fdc:	08004960 	.word	0x08004960
  INIT_BSS _sbss, _ebss
 8000fe0:	20000018 	.word	0x20000018
 8000fe4:	20000130 	.word	0x20000130

08000fe8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_Init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x3c>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f94e 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001008:	200f      	movs	r0, #15
 800100a:	f000 f80f 	bl	800102c <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	e001      	b.n	800101e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101a:	f7ff fee1 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58004000 	.word	0x58004000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_InitTick+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d024      	beq.n	800108a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001040:	f002 f96c 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8001044:	4602      	mov	r2, r0
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_InitTick+0x6c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	fbb3 f3f1 	udiv	r3, r3, r1
 8001054:	fbb2 f3f3 	udiv	r3, r2, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f948 	bl	80012ee <HAL_SYSTICK_Config>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10f      	bne.n	8001084 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d809      	bhi.n	800107e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106a:	2200      	movs	r2, #0
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f04f 30ff 	mov.w	r0, #4294967295
 8001072:	f000 f922 	bl	80012ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_InitTick+0x70>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e007      	b.n	800108e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e004      	b.n	800108e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000010 	.word	0x20000010
 800109c:	2000000c 	.word	0x2000000c

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000010 	.word	0x20000010
 80010c4:	2000009c 	.word	0x2000009c

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000009c 	.word	0x2000009c

080010e0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTickPrio+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffe2 	bl	80010c8 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffd2 	bl	80010c8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000010 	.word	0x20000010

08001140 <__NVIC_SetPriorityGrouping>:
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_SetPriority>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff47 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb2 	bl	8001260 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e14c      	b.n	80015b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 813e 	beq.w	80015ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x40>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d123      	bne.n	800143a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	6939      	ldr	r1, [r7, #16]
 8001436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0203 	and.w	r2, r3, #3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8098 	beq.w	80015ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800147c:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x2c8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014a6:	d019      	beq.n	80014dc <HAL_GPIO_Init+0x1d4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x2cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d013      	beq.n	80014d8 <HAL_GPIO_Init+0x1d0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00d      	beq.n	80014d4 <HAL_GPIO_Init+0x1cc>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d007      	beq.n	80014d0 <HAL_GPIO_Init+0x1c8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_GPIO_Init+0x1c4>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e008      	b.n	80014de <HAL_GPIO_Init+0x1d6>
 80014cc:	2307      	movs	r3, #7
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x1d6>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e004      	b.n	80014de <HAL_GPIO_Init+0x1d6>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x1d6>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_GPIO_Init+0x1d6>
 80014dc:	2300      	movs	r3, #0
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	4093      	lsls	r3, r2
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ee:	4938      	ldr	r1, [pc, #224]	; (80015d0 <HAL_GPIO_Init+0x2c8>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001520:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800154a:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f aeab 	bne.w	8001318 <HAL_GPIO_Init+0x10>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40010000 	.word	0x40010000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48000800 	.word	0x48000800
 80015dc:	48000c00 	.word	0x48000c00
 80015e0:	48001000 	.word	0x48001000
 80015e4:	58000800 	.word	0x58000800

080015e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e081      	b.n	80016fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fbee 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2224      	movs	r2, #36	; 0x24
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e006      	b.n	8001670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800166e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d104      	bne.n	8001682 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69d9      	ldr	r1, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	460b      	mov	r3, r1
 800171c:	813b      	strh	r3, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 80f9 	bne.w	8001922 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_I2C_Mem_Write+0x34>
 8001736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ed      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Mem_Write+0x4e>
 8001752:	2302      	movs	r3, #2
 8001754:	e0e6      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800175e:	f7ff fcb3 	bl	80010c8 <HAL_GetTick>
 8001762:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2319      	movs	r3, #25
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fac3 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d1      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2221      	movs	r2, #33	; 0x21
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a8:	88f8      	ldrh	r0, [r7, #6]
 80017aa:	893a      	ldrh	r2, [r7, #8]
 80017ac:	8979      	ldrh	r1, [r7, #10]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4603      	mov	r3, r0
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f9d3 	bl	8001b64 <I2C_RequestMemoryWrite>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0a9      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d90e      	bls.n	80017f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	22ff      	movs	r2, #255	; 0xff
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	8979      	ldrh	r1, [r7, #10]
 80017e8:	2300      	movs	r3, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fc2b 	bl	800204c <I2C_TransferConfig>
 80017f6:	e00f      	b.n	8001818 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	b2da      	uxtb	r2, r3
 8001808:	8979      	ldrh	r1, [r7, #10]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fc1a 	bl	800204c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 faad 	bl	8001d7c <I2C_WaitOnTXISFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e07b      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d034      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x1c8>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	d130      	bne.n	80018d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2200      	movs	r2, #0
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 fa3f 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e04d      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d90e      	bls.n	80018b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	22ff      	movs	r2, #255	; 0xff
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	b2da      	uxtb	r2, r3
 800189e:	8979      	ldrh	r1, [r7, #10]
 80018a0:	2300      	movs	r3, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fbcf 	bl	800204c <I2C_TransferConfig>
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fbbe 	bl	800204c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d19e      	bne.n	8001818 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fa8c 	bl	8001dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01a      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2220      	movs	r2, #32
 80018f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_I2C_Mem_Write+0x224>)
 8001902:	400b      	ands	r3, r1
 8001904:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001922:	2302      	movs	r3, #2
  }
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	fe00e800 	.word	0xfe00e800

08001930 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	460b      	mov	r3, r1
 8001944:	813b      	strh	r3, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	f040 80fd 	bne.w	8001b52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_I2C_Mem_Read+0x34>
 800195e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0f1      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_I2C_Mem_Read+0x4e>
 800197a:	2302      	movs	r3, #2
 800197c:	e0ea      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001986:	f7ff fb9f 	bl	80010c8 <HAL_GetTick>
 800198a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2319      	movs	r3, #25
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f9af 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d5      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2222      	movs	r2, #34	; 0x22
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	893a      	ldrh	r2, [r7, #8]
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	4603      	mov	r3, r0
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f913 	bl	8001c0c <I2C_RequestMemoryRead>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ad      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d90e      	bls.n	8001a20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	22ff      	movs	r2, #255	; 0xff
 8001a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	8979      	ldrh	r1, [r7, #10]
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_I2C_Mem_Read+0x22c>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fb17 	bl	800204c <I2C_TransferConfig>
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_I2C_Mem_Read+0x22c>)
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fb06 	bl	800204c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a46:	2200      	movs	r2, #0
 8001a48:	2104      	movs	r1, #4
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f956 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07c      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d034      	beq.n	8001b00 <HAL_I2C_Mem_Read+0x1d0>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d130      	bne.n	8001b00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f927 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e04d      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d90e      	bls.n	8001ae0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	8979      	ldrh	r1, [r7, #10]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fab7 	bl	800204c <I2C_TransferConfig>
 8001ade:	e00f      	b.n	8001b00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 faa6 	bl	800204c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d19a      	bne.n	8001a40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f974 	bl	8001dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e01a      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2220      	movs	r2, #32
 8001b24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_I2C_Mem_Read+0x230>)
 8001b32:	400b      	ands	r3, r1
 8001b34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
  }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	80002400 	.word	0x80002400
 8001b60:	fe00e800 	.word	0xfe00e800

08001b64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	460b      	mov	r3, r1
 8001b78:	813b      	strh	r3, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <I2C_RequestMemoryWrite+0xa4>)
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fa5d 	bl	800204c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	69b9      	ldr	r1, [r7, #24]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f8f0 	bl	8001d7c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e02c      	b.n	8001c00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bac:	893b      	ldrh	r3, [r7, #8]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bb6:	e015      	b.n	8001be4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bb8:	893b      	ldrh	r3, [r7, #8]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	69b9      	ldr	r1, [r7, #24]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f8d6 	bl	8001d7c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e012      	b.n	8001c00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bda:	893b      	ldrh	r3, [r7, #8]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2200      	movs	r2, #0
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f884 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	80002000 	.word	0x80002000

08001c0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	817b      	strh	r3, [r7, #10]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	813b      	strh	r3, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <I2C_RequestMemoryRead+0xa4>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fa0a 	bl	800204c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f89d 	bl	8001d7c <I2C_WaitOnTXISFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e02c      	b.n	8001ca6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c52:	893b      	ldrh	r3, [r7, #8]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c5c:	e015      	b.n	8001c8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f883 	bl	8001d7c <I2C_WaitOnTXISFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e012      	b.n	8001ca6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c80:	893b      	ldrh	r3, [r7, #8]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2140      	movs	r1, #64	; 0x40
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f831 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	80002000 	.word	0x80002000

08001cb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d103      	bne.n	8001cd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d007      	beq.n	8001cf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	619a      	str	r2, [r3, #24]
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d0c:	e022      	b.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d01e      	beq.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f9d7 	bl	80010c8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d113      	bne.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00f      	b.n	8001d74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d0cd      	beq.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d88:	e02c      	b.n	8001de4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f870 	bl	8001e74 <I2C_IsErrorOccurred>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e02a      	b.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d01e      	beq.n	8001de4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da6:	f7ff f98f 	bl	80010c8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d302      	bcc.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d113      	bne.n	8001de4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e007      	b.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d1cb      	bne.n	8001d8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e08:	e028      	b.n	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f830 	bl	8001e74 <I2C_IsErrorOccurred>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e026      	b.n	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7ff f953 	bl	80010c8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e007      	b.n	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d1cf      	bne.n	8001e0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d075      	beq.n	8001f8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ea8:	e056      	b.n	8001f58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d052      	beq.n	8001f58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7ff f909 	bl	80010c8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <I2C_IsErrorOccurred+0x54>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d147      	bne.n	8001f58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eea:	d12e      	bne.n	8001f4a <I2C_IsErrorOccurred+0xd6>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef2:	d02a      	beq.n	8001f4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d027      	beq.n	8001f4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f0a:	f7ff f8dd 	bl	80010c8 <HAL_GetTick>
 8001f0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f10:	e01b      	b.n	8001f4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f12:	f7ff f8d9 	bl	80010c8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b19      	cmp	r3, #25
 8001f1e:	d914      	bls.n	8001f4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d1dc      	bne.n	8001f12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d003      	beq.n	8001f6e <I2C_IsErrorOccurred+0xfa>
 8001f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d09d      	beq.n	8001eaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01c      	beq.n	800203c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff fe56 	bl	8001cb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <I2C_IsErrorOccurred+0x1d4>)
 8002014:	400b      	ands	r3, r1
 8002016:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	431a      	orrs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002040:	4618      	mov	r0, r3
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fe00e800 	.word	0xfe00e800

0800204c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	4613      	mov	r3, r2
 800205c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002064:	7a7b      	ldrb	r3, [r7, #9]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800206c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	4313      	orrs	r3, r2
 8002076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800207a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	0d5b      	lsrs	r3, r3, #21
 8002086:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <I2C_TransferConfig+0x60>)
 800208c:	430b      	orrs	r3, r1
 800208e:	43db      	mvns	r3, r3
 8002090:	ea02 0103 	and.w	r1, r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	03ff63ff 	.word	0x03ff63ff

080020b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d138      	bne.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e032      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b20      	cmp	r3, #32
 800215a:	d139      	bne.n	80021d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002166:	2302      	movs	r3, #2
 8002168:	e033      	b.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2224      	movs	r2, #36	; 0x24
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	58000400 	.word	0x58000400

08002200 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_PWREx_GetVoltageRange+0x18>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	58000400 	.word	0x58000400

0800221c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800222e:	d101      	bne.n	8002234 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800228e:	d101      	bne.n	8002294 <LL_RCC_HSE_IsReady+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_RCC_HSE_IsReady+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d101      	bne.n	80022f4 <LL_RCC_HSI_IsReady+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_RCC_HSI_IsReady+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d101      	bne.n	8002386 <LL_RCC_HSI48_IsReady+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_RCC_HSI48_IsReady+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d101      	bne.n	8002432 <LL_RCC_LSE_IsReady+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_RCC_LSE_IsReady+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d101      	bne.n	800249a <LL_RCC_LSI1_IsReady+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_RCC_LSI1_IsReady+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d101      	bne.n	8002502 <LL_RCC_LSI2_IsReady+0x18>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_RCC_LSI2_IsReady+0x1a>
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6013      	str	r3, [r2, #0]
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d101      	bne.n	800258e <LL_RCC_MSI_IsReady+0x16>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_RCC_MSI_IsReady+0x18>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2bb0      	cmp	r3, #176	; 0xb0
 80025d8:	d901      	bls.n	80025de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80025da:	23b0      	movs	r3, #176	; 0xb0
 80025dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 0203 	bic.w	r2, r3, #3
 8002628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800268e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026ba:	f023 020f 	bic.w	r2, r3, #15
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278c:	6013      	str	r3, [r2, #0]
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027aa:	d101      	bne.n	80027b0 <LL_RCC_PLL_IsReady+0x18>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <LL_RCC_PLL_IsReady+0x1a>
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0303 	and.w	r3, r3, #3
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d101      	bne.n	8002836 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002856:	d101      	bne.n	800285c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d101      	bne.n	8002882 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a0:	d101      	bne.n	80028a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028c4:	d101      	bne.n	80028ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b08d      	sub	sp, #52	; 0x34
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e363      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 808d 	beq.w	8002a12 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f8:	f7ff fea1 	bl	800263e <LL_RCC_GetSysClkSource>
 80028fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028fe:	f7ff ff82 	bl	8002806 <LL_RCC_PLL_GetMainSource>
 8002902:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x3e>
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d147      	bne.n	80029a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b01      	cmp	r3, #1
 8002914:	d144      	bne.n	80029a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e347      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002926:	f7ff fe4c 	bl	80025c2 <LL_RCC_MSI_GetRange>
 800292a:	4603      	mov	r3, r0
 800292c:	429c      	cmp	r4, r3
 800292e:	d914      	bls.n	800295a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fd05 	bl	8003344 <RCC_SetFlashLatencyFromMSIRange>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e336      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe26 	bl	800259a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fe4a 	bl	80025ec <LL_RCC_MSI_SetCalibTrimming>
 8002958:	e013      	b.n	8002982 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe1b 	bl	800259a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fe3f 	bl	80025ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fce6 	bl	8003344 <RCC_SetFlashLatencyFromMSIRange>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e317      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002982:	f000 fccb 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8002986:	4603      	mov	r3, r0
 8002988:	4aa4      	ldr	r2, [pc, #656]	; (8002c1c <HAL_RCC_OscConfig+0x344>)
 800298a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800298c:	4ba4      	ldr	r3, [pc, #656]	; (8002c20 <HAL_RCC_OscConfig+0x348>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fb4b 	bl	800102c <HAL_InitTick>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d039      	beq.n	8002a10 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e308      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01e      	beq.n	80029e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029a8:	f7ff fdc8 	bl	800253c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fb8c 	bl	80010c8 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b4:	f7fe fb88 	bl	80010c8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e2f5      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80029c6:	f7ff fdd7 	bl	8002578 <LL_RCC_MSI_IsReady>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f1      	beq.n	80029b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fde0 	bl	800259a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fe04 	bl	80025ec <LL_RCC_MSI_SetCalibTrimming>
 80029e4:	e015      	b.n	8002a12 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029e6:	f7ff fdb8 	bl	800255a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ea:	f7fe fb6d 	bl	80010c8 <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f2:	f7fe fb69 	bl	80010c8 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e2d6      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a04:	f7ff fdb8 	bl	8002578 <LL_RCC_MSI_IsReady>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <HAL_RCC_OscConfig+0x11a>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a10:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d047      	beq.n	8002aae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1e:	f7ff fe0e 	bl	800263e <LL_RCC_GetSysClkSource>
 8002a22:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a24:	f7ff feef 	bl	8002806 <LL_RCC_PLL_GetMainSource>
 8002a28:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x164>
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d134      	bne.n	8002aae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e2b4      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x180>
 8002a52:	f7ff fbf5 	bl	8002240 <LL_RCC_HSE_Enable>
 8002a56:	e001      	b.n	8002a5c <HAL_RCC_OscConfig+0x184>
 8002a58:	f7ff fc01 	bl	800225e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d012      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fb30 	bl	80010c8 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fb2c 	bl	80010c8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e299      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a7e:	f7ff fbfd 	bl	800227c <LL_RCC_HSE_IsReady>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f1      	beq.n	8002a6c <HAL_RCC_OscConfig+0x194>
 8002a88:	e011      	b.n	8002aae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fb1d 	bl	80010c8 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a92:	f7fe fb19 	bl	80010c8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e286      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002aa4:	f7ff fbea 	bl	800227c <LL_RCC_HSE_IsReady>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d04c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	f7ff fdc0 	bl	800263e <LL_RCC_GetSysClkSource>
 8002abe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	f7ff fea1 	bl	8002806 <LL_RCC_PLL_GetMainSource>
 8002ac4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x200>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d10e      	bne.n	8002af0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e266      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fc09 	bl	8002300 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002aee:	e031      	b.n	8002b54 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d019      	beq.n	8002b2c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	f7ff fbd2 	bl	80022a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fae4 	bl	80010c8 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fae0 	bl	80010c8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e24d      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b16:	f7ff fbe1 	bl	80022dc <LL_RCC_HSI_IsReady>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f1      	beq.n	8002b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fbeb 	bl	8002300 <LL_RCC_HSI_SetCalibTrimming>
 8002b2a:	e013      	b.n	8002b54 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2c:	f7ff fbc7 	bl	80022be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe faca 	bl	80010c8 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe fac6 	bl	80010c8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e233      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b4a:	f7ff fbc7 	bl	80022dc <LL_RCC_HSI_IsReady>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f1      	bne.n	8002b38 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a3 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d076      	beq.n	8002c64 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d046      	beq.n	8002c10 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002b82:	f7ff fc7e 	bl	8002482 <LL_RCC_LSI1_IsReady>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002b8c:	f7ff fc57 	bl	800243e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b90:	f7fe fa9a 	bl	80010c8 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b98:	f7fe fa96 	bl	80010c8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e203      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002baa:	f7ff fc6a 	bl	8002482 <LL_RCC_LSI1_IsReady>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f1      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002bb4:	f7ff fc77 	bl	80024a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa86 	bl	80010c8 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bc0:	f7fe fa82 	bl	80010c8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1ef      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002bd2:	f7ff fc8a 	bl	80024ea <LL_RCC_LSI2_IsReady>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f1      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fc94 	bl	800250e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002be6:	f7ff fc3b 	bl	8002460 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fa6d 	bl	80010c8 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bf2:	f7fe fa69 	bl	80010c8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1d6      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c04:	f7ff fc3d 	bl	8002482 <LL_RCC_LSI1_IsReady>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f1      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x31a>
 8002c0e:	e051      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002c10:	f7ff fc15 	bl	800243e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fa58 	bl	80010c8 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c1a:	e00c      	b.n	8002c36 <HAL_RCC_OscConfig+0x35e>
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c24:	f7fe fa50 	bl	80010c8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1bd      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c36:	f7ff fc24 	bl	8002482 <LL_RCC_LSI1_IsReady>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f1      	beq.n	8002c24 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002c40:	f7ff fc42 	bl	80024c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c46:	f7fe fa3f 	bl	80010c8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1ac      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c58:	f7ff fc47 	bl	80024ea <LL_RCC_LSI2_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f1      	bne.n	8002c46 <HAL_RCC_OscConfig+0x36e>
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002c64:	f7ff fc30 	bl	80024c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe fa2e 	bl	80010c8 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c70:	f7fe fa2a 	bl	80010c8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e197      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c82:	f7ff fc32 	bl	80024ea <LL_RCC_LSI2_IsReady>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f1      	bne.n	8002c70 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002c8c:	f7ff fbe8 	bl	8002460 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fa1a 	bl	80010c8 <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c98:	f7fe fa16 	bl	80010c8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e183      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002caa:	f7ff fbea 	bl	8002482 <LL_RCC_LSI1_IsReady>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f1      	bne.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4ba7      	ldr	r3, [pc, #668]	; (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d114      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ccc:	f7ff fa88 	bl	80021e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe f9fa 	bl	80010c8 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7fe f9f6 	bl	80010c8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e163      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cea:	4b9d      	ldr	r3, [pc, #628]	; (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_RCC_OscConfig+0x42c>
 8002cfe:	f7ff fb48 	bl	8002392 <LL_RCC_LSE_Enable>
 8002d02:	e00c      	b.n	8002d1e <HAL_RCC_OscConfig+0x446>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d104      	bne.n	8002d16 <HAL_RCC_OscConfig+0x43e>
 8002d0c:	f7ff fb63 	bl	80023d6 <LL_RCC_LSE_EnableBypass>
 8002d10:	f7ff fb3f 	bl	8002392 <LL_RCC_LSE_Enable>
 8002d14:	e003      	b.n	8002d1e <HAL_RCC_OscConfig+0x446>
 8002d16:	f7ff fb4d 	bl	80023b4 <LL_RCC_LSE_Disable>
 8002d1a:	f7ff fb6d 	bl	80023f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe f9cf 	bl	80010c8 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe f9cb 	bl	80010c8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e136      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d44:	f7ff fb69 	bl	800241a <LL_RCC_LSE_IsReady>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ef      	beq.n	8002d2e <HAL_RCC_OscConfig+0x456>
 8002d4e:	e013      	b.n	8002d78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe f9ba 	bl	80010c8 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe f9b6 	bl	80010c8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e121      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d6e:	f7ff fb54 	bl	800241a <LL_RCC_LSE_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ef      	bne.n	8002d58 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02c      	beq.n	8002dde <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d014      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d8c:	f7ff facd 	bl	800232a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe f99a 	bl	80010c8 <HAL_GetTick>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d98:	f7fe f996 	bl	80010c8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e103      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002daa:	f7ff fae0 	bl	800236e <LL_RCC_HSI48_IsReady>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f1      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4c0>
 8002db4:	e013      	b.n	8002dde <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db6:	f7ff fac9 	bl	800234c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f985 	bl	80010c8 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fe f981 	bl	80010c8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0ee      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002dd4:	f7ff facb 	bl	800236e <LL_RCC_HSI48_IsReady>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f1      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80e4 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de8:	f7ff fc29 	bl	800263e <LL_RCC_GetSysClkSource>
 8002dec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	f040 80b4 	bne.w	8002f68 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d123      	bne.n	8002e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d11c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d114      	bne.n	8002e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d05d      	beq.n	8002f12 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d058      	beq.n	8002f0e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0a1      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e6e:	f7ff fc84 	bl	800277a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e72:	f7fe f929 	bl	80010c8 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe f925 	bl	80010c8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e092      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ef      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x68c>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb2:	0212      	lsls	r2, r2, #8
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed0:	f7ff fc44 	bl	800275c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee4:	f7fe f8f0 	bl	80010c8 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe f8ec 	bl	80010c8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e059      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0c:	e050      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d147      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f20:	f7ff fc1c 	bl	800275c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f34:	f7fe f8c8 	bl	80010c8 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe f8c4 	bl	80010c8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e031      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <HAL_RCC_OscConfig+0x664>
 8002f5c:	e028      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6d8>
 8002f5e:	bf00      	nop
 8002f60:	58000400 	.word	0x58000400
 8002f64:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d01e      	beq.n	8002fac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	f7ff fc04 	bl	800277a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fe f8a9 	bl	80010c8 <HAL_GetTick>
 8002f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe f8a5 	bl	80010c8 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e012      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ef      	bne.n	8002f7a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_OscConfig+0x6e4>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60cb      	str	r3, [r1, #12]
 8002faa:	e001      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3734      	adds	r7, #52	; 0x34
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	eefefffc 	.word	0xeefefffc

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e12d      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b98      	ldr	r3, [pc, #608]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d91b      	bls.n	800301a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b95      	ldr	r3, [pc, #596]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4993      	ldr	r1, [pc, #588]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fe f869 	bl	80010c8 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ffa:	f7fe f865 	bl	80010c8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e111      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	4b8a      	ldr	r3, [pc, #552]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d1ef      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fb13 	bl	8002656 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003030:	f7fe f84a 	bl	80010c8 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003038:	f7fe f846 	bl	80010c8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0f2      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800304a:	f7ff fbe8 	bl	800281e <LL_RCC_IsActiveFlag_HPRE>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f1      	beq.n	8003038 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fb0a 	bl	800267e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800306a:	f7fe f82d 	bl	80010c8 <HAL_GetTick>
 800306e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003072:	f7fe f829 	bl	80010c8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0d5      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003084:	f7ff fbdd 	bl	8002842 <LL_RCC_IsActiveFlag_C2HPRE>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f1      	beq.n	8003072 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fb03 	bl	80026aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030a4:	f7fe f810 	bl	80010c8 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030ac:	f7fe f80c 	bl	80010c8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0b8      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80030be:	f7ff fbd3 	bl	8002868 <LL_RCC_IsActiveFlag_SHDHPRE>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f1      	beq.n	80030ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d016      	beq.n	8003102 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fafd 	bl	80026d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030de:	f7fd fff3 	bl	80010c8 <HAL_GetTick>
 80030e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030e6:	f7fd ffef 	bl	80010c8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e09b      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030f8:	f7ff fbc9 	bl	800288e <LL_RCC_IsActiveFlag_PPRE1>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f1      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff faf3 	bl	8002700 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800311a:	f7fd ffd5 	bl	80010c8 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003122:	f7fd ffd1 	bl	80010c8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e07d      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003134:	f7ff fbbd 	bl	80028b2 <LL_RCC_IsActiveFlag_PPRE2>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f1      	beq.n	8003122 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d043      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d106      	bne.n	8003160 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003152:	f7ff f893 	bl	800227c <LL_RCC_HSE_IsReady>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11e      	bne.n	800319a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e067      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d106      	bne.n	8003176 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003168:	f7ff fb16 	bl	8002798 <LL_RCC_PLL_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d113      	bne.n	800319a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e05c      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800317e:	f7ff f9fb 	bl	8002578 <LL_RCC_MSI_IsReady>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d108      	bne.n	800319a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e051      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800318c:	f7ff f8a6 	bl	80022dc <LL_RCC_HSI_IsReady>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04a      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fa39 	bl	8002616 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fd ff90 	bl	80010c8 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fd ff8c 	bl	80010c8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e036      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	f7ff fa3c 	bl	800263e <LL_RCC_GetSysClkSource>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d1ec      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d21b      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 0207 	bic.w	r2, r3, #7
 80031e8:	4913      	ldr	r1, [pc, #76]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fd ff6a 	bl	80010c8 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	e008      	b.n	800320a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031f8:	f7fd ff66 	bl	80010c8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e012      	b.n	8003230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x278>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d1ef      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003218:	f000 f880 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800321c:	4603      	mov	r3, r0
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_RCC_ClockConfig+0x27c>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003222:	f7fd ff5d 	bl	80010e0 <HAL_GetTickPrio>
 8003226:	4603      	mov	r3, r0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd feff 	bl	800102c <HAL_InitTick>
 800322e:	4603      	mov	r3, r0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	58004000 	.word	0x58004000
 800323c:	20000008 	.word	0x20000008

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	f7ff f9fa 	bl	800263e <LL_RCC_GetSysClkSource>
 800324a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003252:	f7ff f9b6 	bl	80025c2 <LL_RCC_MSI_GetRange>
 8003256:	4603      	mov	r3, r0
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	4a2b      	ldr	r2, [pc, #172]	; (800330c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e04b      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d102      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e045      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d10a      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800327a:	f7fe ffcf 	bl	800221c <LL_RCC_HSE_IsEnabledDiv2>
 800327e:	4603      	mov	r3, r0
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e03a      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_RCC_GetSysClockFreq+0xd8>)
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e037      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003290:	f7ff fab9 	bl	8002806 <LL_RCC_PLL_GetMainSource>
 8003294:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d003      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x64>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x6a>
 80032a2:	e00d      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032a6:	60bb      	str	r3, [r7, #8]
        break;
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032aa:	f7fe ffb7 	bl	800221c <LL_RCC_HSE_IsEnabledDiv2>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80032b8:	e00d      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_RCC_GetSysClockFreq+0xd8>)
 80032bc:	60bb      	str	r3, [r7, #8]
        break;
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80032c0:	f7ff f97f 	bl	80025c2 <LL_RCC_MSI_GetRange>
 80032c4:	4603      	mov	r3, r0
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_RCC_GetSysClockFreq+0xcc>)
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	60bb      	str	r3, [r7, #8]
        break;
 80032d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80032d6:	f7ff fa71 	bl	80027bc <LL_RCC_PLL_GetN>
 80032da:	4602      	mov	r2, r0
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	fb03 f402 	mul.w	r4, r3, r2
 80032e2:	f7ff fa84 	bl	80027ee <LL_RCC_PLL_GetDivider>
 80032e6:	4603      	mov	r3, r0
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	3301      	adds	r3, #1
 80032ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80032f0:	f7ff fa71 	bl	80027d6 <LL_RCC_PLL_GetR>
 80032f4:	4603      	mov	r3, r0
 80032f6:	0f5b      	lsrs	r3, r3, #29
 80032f8:	3301      	adds	r3, #1
 80032fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80032fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	bf00      	nop
 800330c:	080048f0 	.word	0x080048f0
 8003310:	00f42400 	.word	0x00f42400
 8003314:	003d0900 	.word	0x003d0900
 8003318:	007a1200 	.word	0x007a1200

0800331c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b598      	push	{r3, r4, r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003320:	f7ff ff8e 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8003324:	4604      	mov	r4, r0
 8003326:	f7ff f9ff 	bl	8002728 <LL_RCC_GetAHBPrescaler>
 800332a:	4603      	mov	r3, r0
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x24>)
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd98      	pop	{r3, r4, r7, pc}
 8003340:	080048b0 	.word	0x080048b0

08003344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2bb0      	cmp	r3, #176	; 0xb0
 8003350:	d903      	bls.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e007      	b.n	800336a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800336a:	f7ff f9e9 	bl	8002740 <LL_RCC_GetAHB4Prescaler>
 800336e:	4603      	mov	r3, r0
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0c9c      	lsrs	r4, r3, #18
 800338e:	f7fe ff37 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8003392:	4603      	mov	r3, r0
 8003394:	4619      	mov	r1, r3
 8003396:	4620      	mov	r0, r4
 8003398:	f000 f80c 	bl	80033b4 <RCC_SetFlashLatency>
 800339c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	bf00      	nop
 80033a8:	080048f0 	.word	0x080048f0
 80033ac:	080048b0 	.word	0x080048b0
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b093      	sub	sp, #76	; 0x4c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <RCC_SetFlashLatency+0xe8>)
 80033c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80033c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80033ca:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <RCC_SetFlashLatency+0xec>)
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80033d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80033d6:	4b33      	ldr	r3, [pc, #204]	; (80034a4 <RCC_SetFlashLatency+0xf0>)
 80033d8:	f107 040c 	add.w	r4, r7, #12
 80033dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80033e2:	2300      	movs	r3, #0
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d11a      	bne.n	8003424 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40
 80033f2:	e013      	b.n	800341c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80033f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	3348      	adds	r3, #72	; 0x48
 80033fa:	443b      	add	r3, r7
 80033fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d807      	bhi.n	8003416 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3348      	adds	r3, #72	; 0x48
 800340c:	443b      	add	r3, r7
 800340e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003414:	e020      	b.n	8003458 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003418:	3301      	adds	r3, #1
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
 800341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341e:	2b03      	cmp	r3, #3
 8003420:	d9e8      	bls.n	80033f4 <RCC_SetFlashLatency+0x40>
 8003422:	e019      	b.n	8003458 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003424:	2300      	movs	r3, #0
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003428:	e013      	b.n	8003452 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3348      	adds	r3, #72	; 0x48
 8003430:	443b      	add	r3, r7
 8003432:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d807      	bhi.n	800344c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	3348      	adds	r3, #72	; 0x48
 8003442:	443b      	add	r3, r7
 8003444:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800344a:	e005      	b.n	8003458 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	3301      	adds	r3, #1
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	2b02      	cmp	r3, #2
 8003456:	d9e8      	bls.n	800342a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <RCC_SetFlashLatency+0xf4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 0207 	bic.w	r2, r3, #7
 8003460:	4911      	ldr	r1, [pc, #68]	; (80034a8 <RCC_SetFlashLatency+0xf4>)
 8003462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003468:	f7fd fe2e 	bl	80010c8 <HAL_GetTick>
 800346c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800346e:	e008      	b.n	8003482 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003470:	f7fd fe2a 	bl	80010c8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e007      	b.n	8003492 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <RCC_SetFlashLatency+0xf4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800348c:	429a      	cmp	r2, r3
 800348e:	d1ef      	bne.n	8003470 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	374c      	adds	r7, #76	; 0x4c
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	bf00      	nop
 800349c:	08004884 	.word	0x08004884
 80034a0:	08004894 	.word	0x08004894
 80034a4:	080048a0 	.word	0x080048a0
 80034a8:	58004000 	.word	0x58004000

080034ac <LL_RCC_LSE_IsEnabled>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <LL_RCC_LSE_IsEnabled+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_RCC_LSE_IsReady>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d101      	bne.n	80034e8 <LL_RCC_LSE_IsReady+0x18>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <LL_RCC_LSE_IsReady+0x1a>
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_RCC_SetRFWKPClockSource>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_SetSMPSClockSource>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_SetSMPSPrescaler>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800355a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4313      	orrs	r3, r2
 8003562:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_RCC_SetUSARTClockSource>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f023 0203 	bic.w	r2, r3, #3
 8003584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_RCC_SetLPUARTClockSource>:
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_RCC_SetI2CClockSource>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RCC_SetLPTIMClockSource>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_RCC_SetSAIClockSource>:
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_RCC_SetRNGClockSource>:
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_RCC_SetCLK48ClockSource>:
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_SetUSBClockSource>:
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffe3 	bl	800368e <LL_RCC_SetCLK48ClockSource>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <LL_RCC_SetADCClockSource>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_RCC_SetRTCClockSource>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_RCC_GetRTCClockSource>:
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_RCC_ForceBackupDomainReset>:
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_PLLSAI1_Enable>:
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003798:	6013      	str	r3, [r2, #0]
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_PLLSAI1_Disable>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d4:	d101      	bne.n	80037da <LL_RCC_PLLSAI1_IsReady+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b088      	sub	sp, #32
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80037f2:	2300      	movs	r3, #0
 80037f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d034      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800380a:	d021      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800380c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003810:	d81b      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003816:	d01d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800381c:	d815      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003826:	d110      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003838:	e00d      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f947 	bl	8003ad2 <RCCEx_PLLSAI1_ConfigNP>
 8003844:	4603      	mov	r3, r0
 8003846:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	77fb      	strb	r3, [r7, #31]
        break;
 800384e:	e002      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fee8 	bl	8003636 <LL_RCC_SetSAIClockSource>
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7ffb      	ldrb	r3, [r7, #31]
 800386a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	2b00      	cmp	r3, #0
 8003876:	d046      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003878:	f7ff ff56 	bl	8003728 <LL_RCC_GetRTCClockSource>
 800387c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	429a      	cmp	r2, r3
 8003886:	d03c      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003888:	f7fe fcaa 	bl	80021e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff30 	bl	80036fc <LL_RCC_SetRTCClockSource>
 800389c:	e02e      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80038a8:	f7ff ff4b 	bl	8003742 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80038ac:	f7ff ff5a 	bl	8003764 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80038be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80038c8:	f7ff fdf0 	bl	80034ac <LL_RCC_LSE_IsEnabled>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d114      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038d2:	f7fd fbf9 	bl	80010c8 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80038d8:	e00b      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd fbf5 	bl	80010c8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d902      	bls.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	77fb      	strb	r3, [r7, #31]
              break;
 80038f0:	e004      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80038f2:	f7ff fded 	bl	80034d0 <LL_RCC_LSE_IsReady>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d1ee      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	77bb      	strb	r3, [r7, #30]
 8003900:	e001      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fe2a 	bl	8003570 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fe35 	bl	800359c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fe5d 	bl	8003602 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fe52 	bl	8003602 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fe2a 	bl	80035c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fe1f 	bl	80035c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d022      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fe8d 	bl	80036ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a8:	d107      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c2:	d10b      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f8dd 	bl	8003b88 <RCCEx_PLLSAI1_ConfigNQ>
 80039ce:	4603      	mov	r3, r0
 80039d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80039d8:	7ffb      	ldrb	r3, [r7, #31]
 80039da:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02b      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fe2a 	bl	8003662 <LL_RCC_SetRNGClockSource>
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7ff fe21 	bl	8003662 <LL_RCC_SetRNGClockSource>
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff fe34 	bl	800368e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d022      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fe3d 	bl	80036d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a78:	d10b      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f8dd 	bl	8003c3e <RCCEx_PLLSAI1_ConfigNR>
 8003a84:	4603      	mov	r3, r0
 8003a86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fd26 	bl	80034f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fd45 	bl	8003548 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fd2c 	bl	8003520 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ade:	f7ff fe61 	bl	80037a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ae2:	f7fd faf1 	bl	80010c8 <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ae8:	e009      	b.n	8003afe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aea:	f7fd faed 	bl	80010c8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d902      	bls.n	8003afe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	73fb      	strb	r3, [r7, #15]
      break;
 8003afc:	e004      	b.n	8003b08 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003afe:	f7ff fe60 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d137      	bne.n	8003b7e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b3c:	f7ff fe23 	bl	8003786 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fd fac2 	bl	80010c8 <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b46:	e009      	b.n	8003b5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b48:	f7fd fabe 	bl	80010c8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d902      	bls.n	8003b5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	73fb      	strb	r3, [r7, #15]
        break;
 8003b5a:	e004      	b.n	8003b66 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b5c:	f7ff fe31 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d1f0      	bne.n	8003b48 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d108      	bne.n	8003b7e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b94:	f7ff fe06 	bl	80037a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b98:	f7fd fa96 	bl	80010c8 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b9e:	e009      	b.n	8003bb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba0:	f7fd fa92 	bl	80010c8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e004      	b.n	8003bbe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bb4:	f7ff fe05 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d137      	bne.n	8003c34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003bf2:	f7ff fdc8 	bl	8003786 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fa67 	bl	80010c8 <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bfc:	e009      	b.n	8003c12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bfe:	f7fd fa63 	bl	80010c8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d902      	bls.n	8003c12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c10:	e004      	b.n	8003c1c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c12:	f7ff fdd6 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d1f0      	bne.n	8003bfe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c4a:	f7ff fdab 	bl	80037a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fd fa3b 	bl	80010c8 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c54:	e009      	b.n	8003c6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c56:	f7fd fa37 	bl	80010c8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d902      	bls.n	8003c6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e004      	b.n	8003c74 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c6a:	f7ff fdaa 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d137      	bne.n	8003cea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ca8:	f7ff fd6d 	bl	8003786 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd fa0c 	bl	80010c8 <HAL_GetTick>
 8003cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cb2:	e009      	b.n	8003cc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb4:	f7fd fa08 	bl	80010c8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d902      	bls.n	8003cc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc6:	e004      	b.n	8003cd2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cc8:	f7ff fd7b 	bl	80037c2 <LL_RCC_PLLSAI1_IsReady>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d1f0      	bne.n	8003cb4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C1_init>:
#include "i2c1.h"

static I2C_HandleTypeDef *hi2c1_ptr;
static uint8_t reading_buf;

void I2C1_init(I2C_HandleTypeDef *handle_ptr){
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = handle_ptr;
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <I2C1_init+0x1c>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	200000a0 	.word	0x200000a0

08003d14 <I2C1_Read8>:
I2C_HandleTypeDef* I2C1_getPtr(void){
	return hi2c1_ptr;
}
uint8_t I2C1_Read8(uint8_t dev_addr, uint8_t reg_addr){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	71fb      	strb	r3, [r7, #7]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(hi2c1_ptr, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &reading_buf, I2C1_BYTE_SIZE, I2C1_TIMEOUT);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <I2C1_Read8+0x3c>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	b299      	uxth	r1, r3
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d34:	9302      	str	r3, [sp, #8]
 8003d36:	2301      	movs	r3, #1
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <I2C1_Read8+0x40>)
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f7fd fdf6 	bl	8001930 <HAL_I2C_Mem_Read>
	return reading_buf;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <I2C1_Read8+0x40>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200000a0 	.word	0x200000a0
 8003d54:	200000a4 	.word	0x200000a4

08003d58 <I2C1_Write8>:
void I2C1_Write8(uint8_t dev_addr, uint8_t reg_addr, uint8_t reg_val){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
 8003d62:	460b      	mov	r3, r1
 8003d64:	71bb      	strb	r3, [r7, #6]
 8003d66:	4613      	mov	r3, r2
 8003d68:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(hi2c1_ptr, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &reg_val, I2C1_BYTE_SIZE, I2C1_TIMEOUT);
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <I2C1_Write8+0x3c>)
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	b299      	uxth	r1, r3
 8003d72:	79bb      	ldrb	r3, [r7, #6]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	1d7b      	adds	r3, r7, #5
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2301      	movs	r3, #1
 8003d86:	f7fd fcbf 	bl	8001708 <HAL_I2C_Mem_Write>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200000a0 	.word	0x200000a0

08003d98 <I2C1_ReadBurst>:
uint8_t I2C1_ReadBurst(uint8_t dev_addr, uint8_t reg_addr, uint8_t buff[], uint8_t buff_size){
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	603a      	str	r2, [r7, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
 8003da6:	460b      	mov	r3, r1
 8003da8:	71bb      	strb	r3, [r7, #6]
 8003daa:	4613      	mov	r3, r2
 8003dac:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(hi2c1_ptr, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, buff_size, I2C1_TIMEOUT);
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <I2C1_ReadBurst+0x44>)
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	b299      	uxth	r1, r3
 8003db6:	79bb      	ldrb	r3, [r7, #6]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	797b      	ldrb	r3, [r7, #5]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003dc2:	9402      	str	r4, [sp, #8]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f7fd fdb0 	bl	8001930 <HAL_I2C_Mem_Read>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200000a0 	.word	0x200000a0

08003de0 <checkForBeat>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
uint8_t checkForBeat(int32_t sample)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	uint8_t beatDetected = false;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 8003dec:	4b5a      	ldr	r3, [pc, #360]	; (8003f58 <checkForBeat+0x178>)
 8003dee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003df2:	4b5a      	ldr	r3, [pc, #360]	; (8003f5c <checkForBeat+0x17c>)
 8003df4:	801a      	strh	r2, [r3, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4858      	ldr	r0, [pc, #352]	; (8003f60 <checkForBeat+0x180>)
 8003dfe:	f000 f8bf 	bl	8003f80 <averageDCEstimator>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b57      	ldr	r3, [pc, #348]	; (8003f64 <checkForBeat+0x184>)
 8003e08:	801a      	strh	r2, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <checkForBeat+0x184>)
 8003e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f8cb 	bl	8003fb8 <lowPassFIRFilter>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <checkForBeat+0x178>)
 8003e28:	801a      	strh	r2, [r3, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <checkForBeat+0x17c>)
 8003e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	0bdb      	lsrs	r3, r3, #15
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b48      	ldr	r3, [pc, #288]	; (8003f58 <checkForBeat+0x178>)
 8003e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	0bdb      	lsrs	r3, r3, #15
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4013      	ands	r3, r2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d034      	beq.n	8003eb6 <checkForBeat+0xd6>
  {

    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 8003e4c:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <checkForBeat+0x188>)
 8003e4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e52:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <checkForBeat+0x18c>)
 8003e54:	801a      	strh	r2, [r3, #0]
    IR_AC_Min = IR_AC_Signal_min;
 8003e56:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <checkForBeat+0x190>)
 8003e58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <checkForBeat+0x194>)
 8003e5e:	801a      	strh	r2, [r3, #0]

    positiveEdge = 1;
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <checkForBeat+0x198>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	801a      	strh	r2, [r3, #0]
    negativeEdge = 0;
 8003e66:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <checkForBeat+0x19c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_max = 0;
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <checkForBeat+0x188>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	801a      	strh	r2, [r3, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 8003e72:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <checkForBeat+0x18c>)
 8003e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <checkForBeat+0x194>)
 8003e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b14      	cmp	r3, #20
 8003e84:	bfcc      	ite	gt
 8003e86:	2301      	movgt	r3, #1
 8003e88:	2300      	movle	r3, #0
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <checkForBeat+0x18c>)
 8003e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e92:	4619      	mov	r1, r3
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <checkForBeat+0x194>)
 8003e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9a:	1acb      	subs	r3, r1, r3
 8003e9c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	bfd4      	ite	le
 8003ea4:	2301      	movle	r3, #1
 8003ea6:	2300      	movgt	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <checkForBeat+0xd6>
    {
      //Heart beat!!!
      beatDetected = true;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <checkForBeat+0x17c>)
 8003eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfcc      	ite	gt
 8003ec0:	2301      	movgt	r3, #1
 8003ec2:	2300      	movle	r3, #0
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <checkForBeat+0x178>)
 8003ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bfd4      	ite	le
 8003ed0:	2301      	movle	r3, #1
 8003ed2:	2300      	movgt	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <checkForBeat+0x110>
  {
    positiveEdge = 0;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <checkForBeat+0x198>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	801a      	strh	r2, [r3, #0]
    negativeEdge = 1;
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <checkForBeat+0x19c>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_min = 0;
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <checkForBeat+0x190>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	801a      	strh	r2, [r3, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <checkForBeat+0x198>)
 8003ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <checkForBeat+0x178>)
 8003efa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <checkForBeat+0x17c>)
 8003f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	bfcc      	ite	gt
 8003f08:	2301      	movgt	r3, #1
 8003f0a:	2300      	movle	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	400b      	ands	r3, r1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <checkForBeat+0x13e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <checkForBeat+0x178>)
 8003f16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <checkForBeat+0x188>)
 8003f1c:	801a      	strh	r2, [r3, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <checkForBeat+0x19c>)
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <checkForBeat+0x178>)
 8003f28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <checkForBeat+0x17c>)
 8003f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	bfb4      	ite	lt
 8003f36:	2301      	movlt	r3, #1
 8003f38:	2300      	movge	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <checkForBeat+0x16c>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <checkForBeat+0x178>)
 8003f44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <checkForBeat+0x190>)
 8003f4a:	801a      	strh	r2, [r3, #0]
  }

  return(beatDetected);
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200000a6 	.word	0x200000a6
 8003f5c:	200000a8 	.word	0x200000a8
 8003f60:	200000b4 	.word	0x200000b4
 8003f64:	200000ae 	.word	0x200000ae
 8003f68:	200000ac 	.word	0x200000ac
 8003f6c:	20000012 	.word	0x20000012
 8003f70:	200000aa 	.word	0x200000aa
 8003f74:	20000014 	.word	0x20000014
 8003f78:	200000b0 	.word	0x200000b0
 8003f7c:	200000b2 	.word	0x200000b2

08003f80 <averageDCEstimator>:

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
  *p += ((((long) x << 15) - *p) >> 4);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	03d9      	lsls	r1, r3, #15
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1acb      	subs	r3, r1, r3
 8003f9a:	111b      	asrs	r3, r3, #4
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
  return (*p >> 15);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	13db      	asrs	r3, r3, #15
 8003fa8:	b21b      	sxth	r3, r3
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <lowPassFIRFilter>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  cbuf[offset] = din;
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <lowPassFIRFilter+0xc0>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <lowPassFIRFilter+0xc4>)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 8003fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd4:	b21a      	sxth	r2, r3
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <lowPassFIRFilter+0xc0>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	3b0b      	subs	r3, #11
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	4926      	ldr	r1, [pc, #152]	; (800407c <lowPassFIRFilter+0xc4>)
 8003fe2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f000 f84b 	bl	8004084 <mul16>
 8003fee:	60f8      	str	r0, [r7, #12]

  for (uint8_t i = 0 ; i < 11 ; i++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	72fb      	strb	r3, [r7, #11]
 8003ff4:	e028      	b.n	8004048 <lowPassFIRFilter+0x90>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <lowPassFIRFilter+0xc8>)
 8003ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ffe:	b218      	sxth	r0, r3
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <lowPassFIRFilter+0xc0>)
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	4a1b      	ldr	r2, [pc, #108]	; (800407c <lowPassFIRFilter+0xc4>)
 8004010:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b18      	ldr	r3, [pc, #96]	; (8004078 <lowPassFIRFilter+0xc0>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f1a3 0116 	sub.w	r1, r3, #22
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	440b      	add	r3, r1
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	4915      	ldr	r1, [pc, #84]	; (800407c <lowPassFIRFilter+0xc4>)
 8004028:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800402c:	b29b      	uxth	r3, r3
 800402e:	4413      	add	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	b21b      	sxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	f000 f825 	bl	8004084 <mul16>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0 ; i < 11 ; i++)
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	3301      	adds	r3, #1
 8004046:	72fb      	strb	r3, [r7, #11]
 8004048:	7afb      	ldrb	r3, [r7, #11]
 800404a:	2b0a      	cmp	r3, #10
 800404c:	d9d3      	bls.n	8003ff6 <lowPassFIRFilter+0x3e>
  }

  offset++;
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <lowPassFIRFilter+0xc0>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <lowPassFIRFilter+0xc0>)
 8004058:	701a      	strb	r2, [r3, #0]
  offset %= 32; //Wrap condition
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <lowPassFIRFilter+0xc0>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	b2da      	uxtb	r2, r3
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <lowPassFIRFilter+0xc0>)
 8004066:	701a      	strb	r2, [r3, #0]

  return(z >> 15);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	13db      	asrs	r3, r3, #15
 800406c:	b21b      	sxth	r3, r3
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200000f8 	.word	0x200000f8
 800407c:	200000b8 	.word	0x200000b8
 8004080:	08004930 	.word	0x08004930

08004084 <mul16>:

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	460a      	mov	r2, r1
 800408e:	80fb      	strh	r3, [r7, #6]
 8004090:	4613      	mov	r3, r2
 8004092:	80bb      	strh	r3, [r7, #4]
  return((long)x * (long)y);
 8004094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004098:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800409c:	fb02 f303 	mul.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <MAX30102_begin>:
uint8_t activeLEDs; //Gets set during setup. Allows check() to calculate how many bytes to read from FIFO
uint8_t revisionID;
sense_struct sense;


uint8_t MAX30102_begin(void) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (MAX30102_readPartID() != MAX30102_EXPECTEDPARTID) {
 80040b0:	f000 f91a 	bl	80042e8 <MAX30102_readPartID>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b15      	cmp	r3, #21
 80040b8:	d001      	beq.n	80040be <MAX30102_begin+0x12>
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e002      	b.n	80040c4 <MAX30102_begin+0x18>
  }
  // Populate revision ID
  MAX30102_readRevisionID();
 80040be:	f000 f91b 	bl	80042f8 <MAX30102_readRevisionID>
  return true;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <MAX30102_softReset>:
  bitMask(MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30102_softReset(void) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
  bitMask(MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	21bf      	movs	r1, #191	; 0xbf
 80040d2:	2009      	movs	r0, #9
 80040d4:	f000 fb4b 	bl	800476e <bitMask>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = HAL_GetTick();
 80040d8:	f7fc fff6 	bl	80010c8 <HAL_GetTick>
 80040dc:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() - startTime < 100)
 80040de:	e00c      	b.n	80040fa <MAX30102_softReset+0x32>
  {
    uint8_t response = read8(MAX30102_MODECONFIG);
 80040e0:	2009      	movs	r0, #9
 80040e2:	f000 fb76 	bl	80047d2 <read8>
 80040e6:	4603      	mov	r3, r0
 80040e8:	70fb      	strb	r3, [r7, #3]
    if ((response & MAX30102_RESET) == 0) break; //We're done!
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <MAX30102_softReset+0x42>
    HAL_Delay(1); //Let's not over burden the I2C bus
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7fc ffff 	bl	80010f8 <HAL_Delay>
  while (HAL_GetTick() - startTime < 100)
 80040fa:	f7fc ffe5 	bl	80010c8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b63      	cmp	r3, #99	; 0x63
 8004106:	d9eb      	bls.n	80040e0 <MAX30102_softReset+0x18>
  }
}
 8004108:	e000      	b.n	800410c <MAX30102_softReset+0x44>
    if ((response & MAX30102_RESET) == 0) break; //We're done!
 800410a:	bf00      	nop
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <MAX30102_setLEDMode>:
void MAX30102_wakeUp(void) {
  // Pull IC out of low power mode (datasheet pg. 19)
  bitMask(MAX30102_MODECONFIG, MAX30102_SHUTDOWN_MASK, MAX30102_WAKEUP);
}

void MAX30102_setLEDMode(uint8_t mode) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	461a      	mov	r2, r3
 8004122:	21f8      	movs	r1, #248	; 0xf8
 8004124:	2009      	movs	r0, #9
 8004126:	f000 fb22 	bl	800476e <bitMask>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <MAX30102_setADCRange>:

void MAX30102_setADCRange(uint8_t adcRange) {
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	71fb      	strb	r3, [r7, #7]
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange);
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	461a      	mov	r2, r3
 8004140:	219f      	movs	r1, #159	; 0x9f
 8004142:	200a      	movs	r0, #10
 8004144:	f000 fb13 	bl	800476e <bitMask>
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <MAX30102_setSampleRate>:

void MAX30102_setSampleRate(uint8_t sampleRate) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	461a      	mov	r2, r3
 800415e:	21e3      	movs	r1, #227	; 0xe3
 8004160:	200a      	movs	r0, #10
 8004162:	f000 fb04 	bl	800476e <bitMask>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <MAX30102_setPulseWidth>:

void MAX30102_setPulseWidth(uint8_t pulseWidth) {
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	71fb      	strb	r3, [r7, #7]
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth);
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	461a      	mov	r2, r3
 800417c:	21fc      	movs	r1, #252	; 0xfc
 800417e:	200a      	movs	r0, #10
 8004180:	f000 faf5 	bl	800476e <bitMask>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <MAX30102_setPulseAmplitudeRed>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30102_setPulseAmplitudeRed(uint8_t amplitude) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  write8(MAX30102_LED1_PULSEAMP, amplitude);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4619      	mov	r1, r3
 800419a:	200c      	movs	r0, #12
 800419c:	f000 fb07 	bl	80047ae <write8>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <MAX30102_setPulseAmplitudeIR>:

void MAX30102_setPulseAmplitudeIR(uint8_t amplitude) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  write8(MAX30102_LED2_PULSEAMP, amplitude);
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	4619      	mov	r1, r3
 80041b6:	200d      	movs	r0, #13
 80041b8:	f000 faf9 	bl	80047ae <write8>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <MAX30102_setPulseAmplitudeGreen>:

void MAX30102_setPulseAmplitudeGreen(uint8_t amplitude) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  write8(MAX30102_LED3_PULSEAMP, amplitude);
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	4619      	mov	r1, r3
 80041d2:	200e      	movs	r0, #14
 80041d4:	f000 faeb 	bl	80047ae <write8>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <MAX30102_setPulseAmplitudeProximity>:

void MAX30102_setPulseAmplitudeProximity(uint8_t amplitude) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  write8(MAX30102_LED_PROX_AMP, amplitude);
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	4619      	mov	r1, r3
 80041ee:	2010      	movs	r0, #16
 80041f0:	f000 fadd 	bl	80047ae <write8>
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <MAX30102_enableSlot>:

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30102_enableSlot(uint8_t slotNumber, uint8_t device) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	460a      	mov	r2, r1
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	4613      	mov	r3, r2
 800420a:	71bb      	strb	r3, [r7, #6]
  switch (slotNumber) {
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	3b01      	subs	r3, #1
 8004210:	2b03      	cmp	r3, #3
 8004212:	d82b      	bhi.n	800426c <MAX30102_enableSlot+0x70>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <MAX30102_enableSlot+0x20>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800423b 	.word	0x0800423b
 8004224:	0800424d 	.word	0x0800424d
 8004228:	0800425b 	.word	0x0800425b
    case (1):
      bitMask(MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, device);
 800422c:	79bb      	ldrb	r3, [r7, #6]
 800422e:	461a      	mov	r2, r3
 8004230:	21f8      	movs	r1, #248	; 0xf8
 8004232:	2011      	movs	r0, #17
 8004234:	f000 fa9b 	bl	800476e <bitMask>
      break;
 8004238:	e019      	b.n	800426e <MAX30102_enableSlot+0x72>
    case (2):
      bitMask(MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, device << 4);
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	218f      	movs	r1, #143	; 0x8f
 8004244:	2011      	movs	r0, #17
 8004246:	f000 fa92 	bl	800476e <bitMask>
      break;
 800424a:	e010      	b.n	800426e <MAX30102_enableSlot+0x72>
    case (3):
      bitMask(MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, device);
 800424c:	79bb      	ldrb	r3, [r7, #6]
 800424e:	461a      	mov	r2, r3
 8004250:	21f8      	movs	r1, #248	; 0xf8
 8004252:	2012      	movs	r0, #18
 8004254:	f000 fa8b 	bl	800476e <bitMask>
      break;
 8004258:	e009      	b.n	800426e <MAX30102_enableSlot+0x72>
    case (4):
      bitMask(MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, device << 4);
 800425a:	79bb      	ldrb	r3, [r7, #6]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	218f      	movs	r1, #143	; 0x8f
 8004264:	2012      	movs	r0, #18
 8004266:	f000 fa82 	bl	800476e <bitMask>
      break;
 800426a:	e000      	b.n	800426e <MAX30102_enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 800426c:	bf00      	nop
  }
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <MAX30102_setFIFOAverage>:
//
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30102_setFIFOAverage(uint8_t numberOfSamples) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  bitMask(MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, numberOfSamples);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	461a      	mov	r2, r3
 8004286:	211f      	movs	r1, #31
 8004288:	2008      	movs	r0, #8
 800428a:	f000 fa70 	bl	800476e <bitMask>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <MAX30102_clearFIFO>:

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30102_clearFIFO(void) {
 8004296:	b580      	push	{r7, lr}
 8004298:	af00      	add	r7, sp, #0
  write8(MAX30102_FIFOWRITEPTR, 0);
 800429a:	2100      	movs	r1, #0
 800429c:	2004      	movs	r0, #4
 800429e:	f000 fa86 	bl	80047ae <write8>
  write8(MAX30102_FIFOOVERFLOW, 0);
 80042a2:	2100      	movs	r1, #0
 80042a4:	2005      	movs	r0, #5
 80042a6:	f000 fa82 	bl	80047ae <write8>
  write8(MAX30102_FIFOREADPTR, 0);
 80042aa:	2100      	movs	r1, #0
 80042ac:	2006      	movs	r0, #6
 80042ae:	f000 fa7e 	bl	80047ae <write8>
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <MAX30102_enableFIFORollover>:

//Enable roll over if FIFO over flows
void MAX30102_enableFIFORollover(void) {
 80042b6:	b580      	push	{r7, lr}
 80042b8:	af00      	add	r7, sp, #0
  bitMask(MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 80042ba:	2210      	movs	r2, #16
 80042bc:	21ef      	movs	r1, #239	; 0xef
 80042be:	2008      	movs	r0, #8
 80042c0:	f000 fa55 	bl	800476e <bitMask>
}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <MAX30102_getWritePointer>:
void MAX30102_setFIFOAlmostFull(uint8_t numberOfSamples) {
  bitMask(MAX30102_FIFOCONFIG, MAX30102_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30102_getWritePointer(void) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  return (read8(MAX30102_FIFOWRITEPTR));
 80042cc:	2004      	movs	r0, #4
 80042ce:	f000 fa80 	bl	80047d2 <read8>
 80042d2:	4603      	mov	r3, r0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <MAX30102_getReadPointer>:

//Read the FIFO Read Pointer
uint8_t MAX30102_getReadPointer(void) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  return (read8(MAX30102_FIFOREADPTR));
 80042dc:	2006      	movs	r0, #6
 80042de:	f000 fa78 	bl	80047d2 <read8>
 80042e2:	4603      	mov	r3, r0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <MAX30102_readPartID>:


//
// Device ID and Revision
//
uint8_t MAX30102_readPartID() {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  return read8(MAX30102_PARTID);
 80042ec:	20ff      	movs	r0, #255	; 0xff
 80042ee:	f000 fa70 	bl	80047d2 <read8>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <MAX30102_readRevisionID>:
void MAX30102_readRevisionID() {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  revisionID = read8(MAX30102_REVISIONID);
 80042fc:	20fe      	movs	r0, #254	; 0xfe
 80042fe:	f000 fa68 	bl	80047d2 <read8>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	4b02      	ldr	r3, [pc, #8]	; (8004310 <MAX30102_readRevisionID+0x18>)
 8004308:	701a      	strb	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200000fa 	.word	0x200000fa

08004314 <MAX30102_setup>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30102_setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	460b      	mov	r3, r1
 8004322:	71bb      	strb	r3, [r7, #6]
 8004324:	4613      	mov	r3, r2
 8004326:	717b      	strb	r3, [r7, #5]
	MAX30102_softReset(); //Reset all configuration, threshold, and data registers to POR values
 8004328:	f7ff fece 	bl	80040c8 <MAX30102_softReset>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_1); //No averaging per FIFO record
 800432c:	79bb      	ldrb	r3, [r7, #6]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d103      	bne.n	800433a <MAX30102_setup+0x26>
 8004332:	2000      	movs	r0, #0
 8004334:	f7ff ffa0 	bl	8004278 <MAX30102_setFIFOAverage>
 8004338:	e025      	b.n	8004386 <MAX30102_setup+0x72>
  else if (sampleAverage == 2) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_2);
 800433a:	79bb      	ldrb	r3, [r7, #6]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d103      	bne.n	8004348 <MAX30102_setup+0x34>
 8004340:	2020      	movs	r0, #32
 8004342:	f7ff ff99 	bl	8004278 <MAX30102_setFIFOAverage>
 8004346:	e01e      	b.n	8004386 <MAX30102_setup+0x72>
  else if (sampleAverage == 4) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_4);
 8004348:	79bb      	ldrb	r3, [r7, #6]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d103      	bne.n	8004356 <MAX30102_setup+0x42>
 800434e:	2040      	movs	r0, #64	; 0x40
 8004350:	f7ff ff92 	bl	8004278 <MAX30102_setFIFOAverage>
 8004354:	e017      	b.n	8004386 <MAX30102_setup+0x72>
  else if (sampleAverage == 8) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_8);
 8004356:	79bb      	ldrb	r3, [r7, #6]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d103      	bne.n	8004364 <MAX30102_setup+0x50>
 800435c:	2060      	movs	r0, #96	; 0x60
 800435e:	f7ff ff8b 	bl	8004278 <MAX30102_setFIFOAverage>
 8004362:	e010      	b.n	8004386 <MAX30102_setup+0x72>
  else if (sampleAverage == 16) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_16);
 8004364:	79bb      	ldrb	r3, [r7, #6]
 8004366:	2b10      	cmp	r3, #16
 8004368:	d103      	bne.n	8004372 <MAX30102_setup+0x5e>
 800436a:	2080      	movs	r0, #128	; 0x80
 800436c:	f7ff ff84 	bl	8004278 <MAX30102_setFIFOAverage>
 8004370:	e009      	b.n	8004386 <MAX30102_setup+0x72>
  else if (sampleAverage == 32) MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_32);
 8004372:	79bb      	ldrb	r3, [r7, #6]
 8004374:	2b20      	cmp	r3, #32
 8004376:	d103      	bne.n	8004380 <MAX30102_setup+0x6c>
 8004378:	20a0      	movs	r0, #160	; 0xa0
 800437a:	f7ff ff7d 	bl	8004278 <MAX30102_setFIFOAverage>
 800437e:	e002      	b.n	8004386 <MAX30102_setup+0x72>
  else MAX30102_setFIFOAverage(MAX30102_SAMPLEAVG_4);
 8004380:	2040      	movs	r0, #64	; 0x40
 8004382:	f7ff ff79 	bl	8004278 <MAX30102_setFIFOAverage>

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  MAX30102_enableFIFORollover(); //Allow FIFO to wrap/roll over
 8004386:	f7ff ff96 	bl	80042b6 <MAX30102_enableFIFORollover>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) MAX30102_setLEDMode(MAX30102_MODE_MULTILED); //Watch all three LED channels
 800438a:	797b      	ldrb	r3, [r7, #5]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d103      	bne.n	8004398 <MAX30102_setup+0x84>
 8004390:	2007      	movs	r0, #7
 8004392:	f7ff febf 	bl	8004114 <MAX30102_setLEDMode>
 8004396:	e009      	b.n	80043ac <MAX30102_setup+0x98>
  else if (ledMode == 2) MAX30102_setLEDMode(MAX30102_MODE_REDIRONLY); //Red and IR
 8004398:	797b      	ldrb	r3, [r7, #5]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d103      	bne.n	80043a6 <MAX30102_setup+0x92>
 800439e:	2003      	movs	r0, #3
 80043a0:	f7ff feb8 	bl	8004114 <MAX30102_setLEDMode>
 80043a4:	e002      	b.n	80043ac <MAX30102_setup+0x98>
  else MAX30102_setLEDMode(MAX30102_MODE_REDONLY); //Red only
 80043a6:	2002      	movs	r0, #2
 80043a8:	f7ff feb4 	bl	8004114 <MAX30102_setLEDMode>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80043ac:	4a58      	ldr	r2, [pc, #352]	; (8004510 <MAX30102_setup+0x1fc>)
 80043ae:	797b      	ldrb	r3, [r7, #5]
 80043b0:	7013      	strb	r3, [r2, #0]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) MAX30102_setADCRange(MAX30102_ADCRANGE_2048); //7.81pA per LSB
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	da03      	bge.n	80043c2 <MAX30102_setup+0xae>
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7ff feb9 	bl	8004132 <MAX30102_setADCRange>
 80043c0:	e01a      	b.n	80043f8 <MAX30102_setup+0xe4>
  else if(adcRange < 8192) MAX30102_setADCRange(MAX30102_ADCRANGE_4096); //15.63pA per LSB
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	da03      	bge.n	80043d2 <MAX30102_setup+0xbe>
 80043ca:	2020      	movs	r0, #32
 80043cc:	f7ff feb1 	bl	8004132 <MAX30102_setADCRange>
 80043d0:	e012      	b.n	80043f8 <MAX30102_setup+0xe4>
  else if(adcRange < 16384) MAX30102_setADCRange(MAX30102_ADCRANGE_8192); //31.25pA per LSB
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d8:	da03      	bge.n	80043e2 <MAX30102_setup+0xce>
 80043da:	2040      	movs	r0, #64	; 0x40
 80043dc:	f7ff fea9 	bl	8004132 <MAX30102_setADCRange>
 80043e0:	e00a      	b.n	80043f8 <MAX30102_setup+0xe4>
  else if(adcRange == 16384) MAX30102_setADCRange(MAX30102_ADCRANGE_16384); //62.5pA per LSB
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e8:	d103      	bne.n	80043f2 <MAX30102_setup+0xde>
 80043ea:	2060      	movs	r0, #96	; 0x60
 80043ec:	f7ff fea1 	bl	8004132 <MAX30102_setADCRange>
 80043f0:	e002      	b.n	80043f8 <MAX30102_setup+0xe4>
  else MAX30102_setADCRange(MAX30102_ADCRANGE_2048);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7ff fe9d 	bl	8004132 <MAX30102_setADCRange>

  if (sampleRate < 100) MAX30102_setSampleRate(MAX30102_SAMPLERATE_50); //Take 50 samples per second
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b63      	cmp	r3, #99	; 0x63
 80043fc:	dc03      	bgt.n	8004406 <MAX30102_setup+0xf2>
 80043fe:	2000      	movs	r0, #0
 8004400:	f7ff fea6 	bl	8004150 <MAX30102_setSampleRate>
 8004404:	e039      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 200) MAX30102_setSampleRate(MAX30102_SAMPLERATE_100);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2bc7      	cmp	r3, #199	; 0xc7
 800440a:	dc03      	bgt.n	8004414 <MAX30102_setup+0x100>
 800440c:	2004      	movs	r0, #4
 800440e:	f7ff fe9f 	bl	8004150 <MAX30102_setSampleRate>
 8004412:	e032      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 400) MAX30102_setSampleRate(MAX30102_SAMPLERATE_200);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800441a:	da03      	bge.n	8004424 <MAX30102_setup+0x110>
 800441c:	2008      	movs	r0, #8
 800441e:	f7ff fe97 	bl	8004150 <MAX30102_setSampleRate>
 8004422:	e02a      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 800) MAX30102_setSampleRate(MAX30102_SAMPLERATE_400);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800442a:	da03      	bge.n	8004434 <MAX30102_setup+0x120>
 800442c:	200c      	movs	r0, #12
 800442e:	f7ff fe8f 	bl	8004150 <MAX30102_setSampleRate>
 8004432:	e022      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 1000) MAX30102_setSampleRate(MAX30102_SAMPLERATE_800);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443a:	da03      	bge.n	8004444 <MAX30102_setup+0x130>
 800443c:	2010      	movs	r0, #16
 800443e:	f7ff fe87 	bl	8004150 <MAX30102_setSampleRate>
 8004442:	e01a      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 1600) MAX30102_setSampleRate(MAX30102_SAMPLERATE_1000);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800444a:	da03      	bge.n	8004454 <MAX30102_setup+0x140>
 800444c:	2014      	movs	r0, #20
 800444e:	f7ff fe7f 	bl	8004150 <MAX30102_setSampleRate>
 8004452:	e012      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate < 3200) MAX30102_setSampleRate(MAX30102_SAMPLERATE_1600);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800445a:	da03      	bge.n	8004464 <MAX30102_setup+0x150>
 800445c:	2018      	movs	r0, #24
 800445e:	f7ff fe77 	bl	8004150 <MAX30102_setSampleRate>
 8004462:	e00a      	b.n	800447a <MAX30102_setup+0x166>
  else if (sampleRate == 3200) MAX30102_setSampleRate(MAX30102_SAMPLERATE_3200);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800446a:	d103      	bne.n	8004474 <MAX30102_setup+0x160>
 800446c:	201c      	movs	r0, #28
 800446e:	f7ff fe6f 	bl	8004150 <MAX30102_setSampleRate>
 8004472:	e002      	b.n	800447a <MAX30102_setup+0x166>
  else MAX30102_setSampleRate(MAX30102_SAMPLERATE_50);
 8004474:	2000      	movs	r0, #0
 8004476:	f7ff fe6b 	bl	8004150 <MAX30102_setSampleRate>

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) MAX30102_setPulseWidth(MAX30102_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b75      	cmp	r3, #117	; 0x75
 800447e:	dc03      	bgt.n	8004488 <MAX30102_setup+0x174>
 8004480:	2000      	movs	r0, #0
 8004482:	f7ff fe74 	bl	800416e <MAX30102_setPulseWidth>
 8004486:	e01a      	b.n	80044be <MAX30102_setup+0x1aa>
  else if (pulseWidth < 215) MAX30102_setPulseWidth(MAX30102_PULSEWIDTH_118); //16 bit resolution
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2bd6      	cmp	r3, #214	; 0xd6
 800448c:	dc03      	bgt.n	8004496 <MAX30102_setup+0x182>
 800448e:	2001      	movs	r0, #1
 8004490:	f7ff fe6d 	bl	800416e <MAX30102_setPulseWidth>
 8004494:	e013      	b.n	80044be <MAX30102_setup+0x1aa>
  else if (pulseWidth < 411) MAX30102_setPulseWidth(MAX30102_PULSEWIDTH_215); //17 bit resolution
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800449c:	dc03      	bgt.n	80044a6 <MAX30102_setup+0x192>
 800449e:	2002      	movs	r0, #2
 80044a0:	f7ff fe65 	bl	800416e <MAX30102_setPulseWidth>
 80044a4:	e00b      	b.n	80044be <MAX30102_setup+0x1aa>
  else if (pulseWidth == 411) MAX30102_setPulseWidth(MAX30102_PULSEWIDTH_411); //18 bit resolution
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f240 129b 	movw	r2, #411	; 0x19b
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d103      	bne.n	80044b8 <MAX30102_setup+0x1a4>
 80044b0:	2003      	movs	r0, #3
 80044b2:	f7ff fe5c 	bl	800416e <MAX30102_setPulseWidth>
 80044b6:	e002      	b.n	80044be <MAX30102_setup+0x1aa>
  else MAX30102_setPulseWidth(MAX30102_PULSEWIDTH_69);
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7ff fe58 	bl	800416e <MAX30102_setPulseWidth>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  MAX30102_setPulseAmplitudeRed(powerLevel);
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fe63 	bl	800418c <MAX30102_setPulseAmplitudeRed>
  MAX30102_setPulseAmplitudeIR(powerLevel);
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fe6d 	bl	80041a8 <MAX30102_setPulseAmplitudeIR>
  MAX30102_setPulseAmplitudeGreen(powerLevel);
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fe77 	bl	80041c4 <MAX30102_setPulseAmplitudeGreen>
  MAX30102_setPulseAmplitudeProximity(powerLevel);
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fe81 	bl	80041e0 <MAX30102_setPulseAmplitudeProximity>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  MAX30102_enableSlot(1, SLOT_RED_LED);
 80044de:	2101      	movs	r1, #1
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7ff fe8b 	bl	80041fc <MAX30102_enableSlot>
  if (ledMode > 1) MAX30102_enableSlot(2, SLOT_IR_LED);
 80044e6:	797b      	ldrb	r3, [r7, #5]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d903      	bls.n	80044f4 <MAX30102_setup+0x1e0>
 80044ec:	2102      	movs	r1, #2
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7ff fe84 	bl	80041fc <MAX30102_enableSlot>
  if (ledMode > 2) MAX30102_enableSlot(3, SLOT_GREEN_LED);
 80044f4:	797b      	ldrb	r3, [r7, #5]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d903      	bls.n	8004502 <MAX30102_setup+0x1ee>
 80044fa:	2103      	movs	r1, #3
 80044fc:	2003      	movs	r0, #3
 80044fe:	f7ff fe7d 	bl	80041fc <MAX30102_enableSlot>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  MAX30102_clearFIFO(); //Reset the FIFO before we begin checking the sensor
 8004502:	f7ff fec8 	bl	8004296 <MAX30102_clearFIFO>
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200000f9 	.word	0x200000f9

08004514 <MAX30102_getIR>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30102_getIR(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
  if(MAX30102_safeCheck(250))
 8004518:	20fa      	movs	r0, #250	; 0xfa
 800451a:	f000 f907 	bl	800472c <MAX30102_safeCheck>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <MAX30102_getIR+0x20>
    return (sense.IR[sense.head]);
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <MAX30102_getIR+0x28>)
 8004526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <MAX30102_getIR+0x28>)
 800452c:	3304      	adds	r3, #4
 800452e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004532:	e000      	b.n	8004536 <MAX30102_getIR+0x22>
  else
    return(0); //Sensor failed to find new data
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200000fc 	.word	0x200000fc

08004540 <MAX30102_check>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30102_check(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b0b2      	sub	sp, #200	; 0xc8
 8004544:	af00      	add	r7, sp, #0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  uint8_t readPointer = MAX30102_getReadPointer();
 8004546:	f7ff fec7 	bl	80042d8 <MAX30102_getReadPointer>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
  uint8_t writePointer = MAX30102_getWritePointer();
 8004550:	f7ff feba 	bl	80042c8 <MAX30102_getWritePointer>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

  int numberOfSamples = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  //Do we have new data?
  if (readPointer != writePointer)
 8004560:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8004564:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8004568:	429a      	cmp	r2, r3
 800456a:	f000 80d3 	beq.w	8004714 <MAX30102_check+0x1d4>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
 800456e:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8004572:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 800457c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004580:	2b00      	cmp	r3, #0
 8004582:	da04      	bge.n	800458e <MAX30102_check+0x4e>
 8004584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004588:	3320      	adds	r3, #32
 800458a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 800458e:	4b65      	ldr	r3, [pc, #404]	; (8004724 <MAX30102_check+0x1e4>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004598:	fb03 f202 	mul.w	r2, r3, r2
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    //Get ready to read a burst of data from the FIFO register
    if (bytesLeftToRead > I2C_BUFFER_LENGTH)
 80045a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	dd0f      	ble.n	80045ce <MAX30102_check+0x8e>
    {
    	//If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        bytesLeftToRead = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80045ae:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <MAX30102_check+0x1e4>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	2220      	movs	r2, #32
 80045bc:	fb92 f1f3 	sdiv	r1, r2, r3
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f1c3 0320 	rsb	r3, r3, #32
 80045ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    }
    uint8_t buff[180]={0};
 80045ce:	2300      	movs	r3, #0
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	22b0      	movs	r2, #176	; 0xb0
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f93f 	bl	800485c <memset>
    readBurst(MAX30102_FIFODATA, buff, bytesLeftToRead);
 80045de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	463b      	mov	r3, r7
 80045e6:	4619      	mov	r1, r3
 80045e8:	2007      	movs	r0, #7
 80045ea:	f000 f901 	bl	80047f0 <readBurst>
    uint8_t counter;
    while(bytesLeftToRead){
 80045ee:	e08c      	b.n	800470a <MAX30102_check+0x1ca>
        sense.head++; //Advance the head of the storage struct
 80045f0:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <MAX30102_check+0x1e8>)
 80045f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045f6:	3301      	adds	r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <MAX30102_check+0x1e8>)
 80045fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        sense.head %= STORAGE_SIZE; //Wrap condition
 8004600:	4b49      	ldr	r3, [pc, #292]	; (8004728 <MAX30102_check+0x1e8>)
 8004602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b46      	ldr	r3, [pc, #280]	; (8004728 <MAX30102_check+0x1e8>)
 800460e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        uint8_t temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        temp[2] = buff[counter++];
 8004618:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8004622:	33c8      	adds	r3, #200	; 0xc8
 8004624:	443b      	add	r3, r7
 8004626:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 800462a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
        temp[1] = buff[counter++];
 800462e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8004638:	33c8      	adds	r3, #200	; 0xc8
 800463a:	443b      	add	r3, r7
 800463c:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8004640:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
        temp[0] = buff[counter++];
 8004644:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 800464e:	33c8      	adds	r3, #200	; 0xc8
 8004650:	443b      	add	r3, r7
 8004652:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8004656:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 800465a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
 800465e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 8004662:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004666:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800466a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 800466e:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <MAX30102_check+0x1e8>)
 8004670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004674:	4619      	mov	r1, r3
 8004676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800467a:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <MAX30102_check+0x1e8>)
 800467c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        if (activeLEDs > 1)
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <MAX30102_check+0x1e4>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d936      	bls.n	80046f6 <MAX30102_check+0x1b6>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
          temp[2] = buff[counter++];
 800468e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8004698:	33c8      	adds	r3, #200	; 0xc8
 800469a:	443b      	add	r3, r7
 800469c:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 80046a0:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
          temp[1] = buff[counter++];
 80046a4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 80046ae:	33c8      	adds	r3, #200	; 0xc8
 80046b0:	443b      	add	r3, r7
 80046b2:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 80046b6:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
          temp[0] = buff[counter++];
 80046ba:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 80046c4:	33c8      	adds	r3, #200	; 0xc8
 80046c6:	443b      	add	r3, r7
 80046c8:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 80046cc:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 80046d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80046d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		  sense.IR[sense.head] = tempLong;
 80046e4:	4b10      	ldr	r3, [pc, #64]	; (8004728 <MAX30102_check+0x1e8>)
 80046e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ee:	490e      	ldr	r1, [pc, #56]	; (8004728 <MAX30102_check+0x1e8>)
 80046f0:	3304      	adds	r3, #4
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }


        bytesLeftToRead -= (activeLEDs * 3);
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <MAX30102_check+0x1e4>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004704:	4413      	add	r3, r2
 8004706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    while(bytesLeftToRead){
 800470a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f47f af6e 	bne.w	80045f0 <MAX30102_check+0xb0>
    }


  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
 8004714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004718:	b29b      	uxth	r3, r3
}
 800471a:	4618      	mov	r0, r3
 800471c:	37c8      	adds	r7, #200	; 0xc8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200000f9 	.word	0x200000f9
 8004728:	200000fc 	.word	0x200000fc

0800472c <MAX30102_safeCheck>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
uint8_t MAX30102_safeCheck(uint8_t maxTimeToCheck)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  uint32_t markTime = HAL_GetTick();
 8004736:	f7fc fcc7 	bl	80010c8 <HAL_GetTick>
 800473a:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	if(HAL_GetTick() - markTime > maxTimeToCheck) return(false);
 800473c:	f7fc fcc4 	bl	80010c8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d901      	bls.n	8004750 <MAX30102_safeCheck+0x24>
 800474c:	2300      	movs	r3, #0
 800474e:	e00a      	b.n	8004766 <MAX30102_safeCheck+0x3a>

	if(MAX30102_check() == true) //We found new data!
 8004750:	f7ff fef6 	bl	8004540 <MAX30102_check>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <MAX30102_safeCheck+0x32>
	  return(true);
 800475a:	2301      	movs	r3, #1
 800475c:	e003      	b.n	8004766 <MAX30102_safeCheck+0x3a>

	HAL_Delay(1);
 800475e:	2001      	movs	r0, #1
 8004760:	f7fc fcca 	bl	80010f8 <HAL_Delay>
	if(HAL_GetTick() - markTime > maxTimeToCheck) return(false);
 8004764:	e7ea      	b.n	800473c <MAX30102_safeCheck+0x10>
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <bitMask>:


void bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	71fb      	strb	r3, [r7, #7]
 8004778:	460b      	mov	r3, r1
 800477a:	71bb      	strb	r3, [r7, #6]
 800477c:	4613      	mov	r3, r2
 800477e:	717b      	strb	r3, [r7, #5]
  uint8_t originalContents = read8(reg);
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f825 	bl	80047d2 <read8>
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]
  originalContents = originalContents & mask;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	79bb      	ldrb	r3, [r7, #6]
 8004790:	4013      	ands	r3, r2
 8004792:	73fb      	strb	r3, [r7, #15]
  write8(reg, originalContents | thing);
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	797b      	ldrb	r3, [r7, #5]
 8004798:	4313      	orrs	r3, r2
 800479a:	b2da      	uxtb	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f804 	bl	80047ae <write8>
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <write8>:

static void write8(uint8_t reg_addr, uint8_t reg_val){
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	460a      	mov	r2, r1
 80047b8:	71fb      	strb	r3, [r7, #7]
 80047ba:	4613      	mov	r3, r2
 80047bc:	71bb      	strb	r3, [r7, #6]
	I2C1_Write8((MAX30105_ADDRESS << 1), reg_addr, reg_val);
 80047be:	79ba      	ldrb	r2, [r7, #6]
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	4619      	mov	r1, r3
 80047c4:	20ae      	movs	r0, #174	; 0xae
 80047c6:	f7ff fac7 	bl	8003d58 <I2C1_Write8>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <read8>:
static uint8_t read8(uint8_t reg_addr){
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	71fb      	strb	r3, [r7, #7]
	return I2C1_Read8(((MAX30105_ADDRESS << 1) | 1), reg_addr);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	4619      	mov	r1, r3
 80047e0:	20af      	movs	r0, #175	; 0xaf
 80047e2:	f7ff fa97 	bl	8003d14 <I2C1_Read8>
 80047e6:	4603      	mov	r3, r0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <readBurst>:
static void readBurst(uint8_t reg_addr, uint8_t buff[], uint8_t buff_size){
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	71fb      	strb	r3, [r7, #7]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71bb      	strb	r3, [r7, #6]
	I2C1_ReadBurst(((MAX30105_ADDRESS << 1) | 1), reg_addr, buff, buff_size);
 8004800:	79bb      	ldrb	r3, [r7, #6]
 8004802:	79f9      	ldrb	r1, [r7, #7]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	20af      	movs	r0, #175	; 0xaf
 8004808:	f7ff fac6 	bl	8003d98 <I2C1_ReadBurst>
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4d0d      	ldr	r5, [pc, #52]	; (800484c <__libc_init_array+0x38>)
 8004818:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <__libc_init_array+0x3c>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	2600      	movs	r6, #0
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	4d0b      	ldr	r5, [pc, #44]	; (8004854 <__libc_init_array+0x40>)
 8004826:	4c0c      	ldr	r4, [pc, #48]	; (8004858 <__libc_init_array+0x44>)
 8004828:	f000 f820 	bl	800486c <_init>
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	2600      	movs	r6, #0
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	08004948 	.word	0x08004948
 8004850:	08004948 	.word	0x08004948
 8004854:	08004948 	.word	0x08004948
 8004858:	0800494c 	.word	0x0800494c

0800485c <memset>:
 800485c:	4402      	add	r2, r0
 800485e:	4603      	mov	r3, r0
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	f803 1b01 	strb.w	r1, [r3], #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
