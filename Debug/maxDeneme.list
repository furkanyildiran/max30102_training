
maxDeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08003c60  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  20000014  08003c6c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000c4  08003c6c  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000db8b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000217e  00000000  00000000  0002dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001340  00000000  00000000  0002fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001288  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020f1d  00000000  00000000  00032318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000eade  00000000  00000000  00053235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d25ce  00000000  00000000  00061d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001342e1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f08  00000000  00000000  00134334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003b94 	.word	0x08003b94

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003b94 	.word	0x08003b94

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fa17 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f81d 	bl	80001f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001be:	f000 f873 	bl	80002a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f8cd 	bl	8000360 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c6:	f000 f88d 	bl	80002e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  begin();
 80001ca:	f003 f891 	bl	80032f0 <begin>
  setup(0x1F, 4, 3, 400, 411, 4096);
 80001ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	f240 139b 	movw	r3, #411	; 0x19b
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80001de:	2203      	movs	r2, #3
 80001e0:	2104      	movs	r1, #4
 80001e2:	201f      	movs	r0, #31
 80001e4:	f003 f9f2 	bl	80035cc <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rd = getRed();
 80001e8:	f003 faf0 	bl	80037cc <getRed>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a01      	ldr	r2, [pc, #4]	; (80001f4 <main+0x44>)
 80001f0:	6013      	str	r3, [r2, #0]
 80001f2:	e7f9      	b.n	80001e8 <main+0x38>
 80001f4:	20000084 	.word	0x20000084

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09a      	sub	sp, #104	; 0x68
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0320 	add.w	r3, r7, #32
 8000202:	2248      	movs	r2, #72	; 0x48
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fcbc 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	615a      	str	r2, [r3, #20]
 800021c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <SystemClock_Config+0xac>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000226:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <SystemClock_Config+0xac>)
 8000228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022c:	6013      	str	r3, [r2, #0]
 800022e:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <SystemClock_Config+0xac>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800023a:	2322      	movs	r3, #34	; 0x22
 800023c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2340      	movs	r3, #64	; 0x40
 800024a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800024c:	2300      	movs	r3, #0
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000250:	2360      	movs	r3, #96	; 0x60
 8000252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0320 	add.w	r3, r7, #32
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fe39 	bl	8001ed4 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000268:	f000 f881 	bl	800036e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800026c:	236f      	movs	r3, #111	; 0x6f
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f002 f995 	bl	80025bc <HAL_RCC_ClockConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000298:	f000 f869 	bl	800036e <Error_Handler>
  }
}
 800029c:	bf00      	nop
 800029e:	3768      	adds	r7, #104	; 0x68
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	58000400 	.word	0x58000400

080002a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2250      	movs	r2, #80	; 0x50
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 fc65 	bl	8003b84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002c4:	2310      	movs	r3, #16
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fd89 	bl	8002de2 <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002d6:	f000 f84a 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	; 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_I2C1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_I2C1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000007;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f0:	2207      	movs	r2, #7
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_I2C1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <MX_I2C1_Init+0x74>)
 8000320:	f000 fc60 	bl	8000be4 <HAL_I2C_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032a:	f000 f820 	bl	800036e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032e:	2100      	movs	r1, #0
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <MX_I2C1_Init+0x74>)
 8000332:	f001 f9bb 	bl	80016ac <HAL_I2CEx_ConfigAnalogFilter>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f817 	bl	800036e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000340:	2100      	movs	r1, #0
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_I2C1_Init+0x74>)
 8000344:	f001 f9fd 	bl	8001742 <HAL_I2CEx_ConfigDigitalFilter>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f80e 	bl	800036e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000030 	.word	0x20000030
 800035c:	40005400 	.word	0x40005400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ff09 	bl	800017c <LL_AHB2_GRP1_EnableClock>

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}

0800036e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000372:	b672      	cpsid	i
}
 8000374:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000376:	e7fe      	b.n	8000376 <Error_Handler+0x8>

08000378 <LL_AHB2_GRP1_EnableClock>:
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4313      	orrs	r3, r2
 800038e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4013      	ands	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039c:	68fb      	ldr	r3, [r7, #12]
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b085      	sub	sp, #20
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4313      	orrs	r3, r2
 80003c0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b09c      	sub	sp, #112	; 0x70
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	2250      	movs	r2, #80	; 0x50
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f003 fbb9 	bl	8003b84 <memset>
  if(hi2c->Instance==I2C1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a17      	ldr	r2, [pc, #92]	; (8000474 <HAL_I2C_MspInit+0x88>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d126      	bne.n	800046a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800041c:	2304      	movs	r3, #4
 800041e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000420:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fcd9 	bl	8002de2 <HAL_RCCEx_PeriphCLKConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000436:	f7ff ff9a 	bl	800036e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	2002      	movs	r0, #2
 800043c:	f7ff ff9c 	bl	8000378 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000444:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000446:	2312      	movs	r3, #18
 8000448:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000452:	2304      	movs	r3, #4
 8000454:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000456:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800045a:	4619      	mov	r1, r3
 800045c:	4806      	ldr	r0, [pc, #24]	; (8000478 <HAL_I2C_MspInit+0x8c>)
 800045e:	f000 fa51 	bl	8000904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000462:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000466:	f7ff ffa0 	bl	80003aa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800046a:	bf00      	nop
 800046c:	3770      	adds	r7, #112	; 0x70
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40005400 	.word	0x40005400
 8000478:	48000400 	.word	0x48000400

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f8e8 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80004d4:	4b24      	ldr	r3, [pc, #144]	; (8000568 <SystemInit+0x98>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <SystemInit+0x98>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80004f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004fc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80004fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <SystemInit+0x9c>)
 800050a:	4013      	ands	r3, r2
 800050c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800050e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800051a:	f023 0305 	bic.w	r3, r3, #5
 800051e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800052a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <SystemInit+0xa0>)
 800053c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800053e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <SystemInit+0xa0>)
 8000544:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000554:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00
 800056c:	faf6fefb 	.word	0xfaf6fefb
 8000570:	22041000 	.word	0x22041000

08000574 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000574:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000576:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000578:	3304      	adds	r3, #4

0800057a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800057e:	d3f9      	bcc.n	8000574 <CopyDataInit>
  bx lr
 8000580:	4770      	bx	lr

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000582:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000584:	3004      	adds	r0, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000586:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>
  bx lr
 800058a:	4770      	bx	lr

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f7ff ff9e 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <LoopForever+0x6>)
 8000596:	490c      	ldr	r1, [pc, #48]	; (80005c8 <LoopForever+0xa>)
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <LoopForever+0xe>)
 800059a:	2300      	movs	r3, #0
 800059c:	f7ff ffed 	bl	800057a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <LoopForever+0x12>)
 80005a2:	490c      	ldr	r1, [pc, #48]	; (80005d4 <LoopForever+0x16>)
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <LoopForever+0x1a>)
 80005a6:	2300      	movs	r3, #0
 80005a8:	f7ff ffe7 	bl	800057a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopForever+0x1e>)
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <LoopForever+0x22>)
 80005b0:	2300      	movs	r3, #0
 80005b2:	f7ff ffe8 	bl	8000586 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f003 fac1 	bl	8003b3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005ba:	f7ff fdf9 	bl	80001b0 <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000014 	.word	0x20000014
 80005cc:	08003c60 	.word	0x08003c60
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80005d0:	20030000 	.word	0x20030000
 80005d4:	20030000 	.word	0x20030000
 80005d8:	08003c6c 	.word	0x08003c6c
  INIT_BSS _sbss, _ebss
 80005dc:	20000014 	.word	0x20000014
 80005e0:	200000c4 	.word	0x200000c4

080005e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_Init+0x3c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <HAL_Init+0x3c>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fe:	2003      	movs	r0, #3
 8000600:	f000 f94e 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000604:	200f      	movs	r0, #15
 8000606:	f000 f80f 	bl	8000628 <HAL_InitTick>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	e001      	b.n	800061a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000616:	f7ff fee1 	bl	80003dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800061a:	79fb      	ldrb	r3, [r7, #7]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	58004000 	.word	0x58004000

08000628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d024      	beq.n	8000686 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800063c:	f002 f96c 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8000640:	4602      	mov	r2, r0
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_InitTick+0x6c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f948 	bl	80008ea <HAL_SYSTICK_Config>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10f      	bne.n	8000680 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b0f      	cmp	r3, #15
 8000664:	d809      	bhi.n	800067a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000666:	2200      	movs	r2, #0
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	f000 f922 	bl	80008b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_InitTick+0x70>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	e007      	b.n	800068a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	e004      	b.n	800068a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e001      	b.n	800068a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800068a:	7bfb      	ldrb	r3, [r7, #15]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000010 	.word	0x20000010
 8000698:	2000000c 	.word	0x2000000c

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000010 	.word	0x20000010
 80006c0:	20000088 	.word	0x20000088

080006c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000088 	.word	0x20000088

080006dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTickPrio+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffe2 	bl	80006c4 <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_Delay+0x44>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffd2 	bl	80006c4 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000010 	.word	0x20000010

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff8e 	bl	80007a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff47 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5e 	bl	8000784 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff90 	bl	80007f4 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5f 	bl	80007a0 <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb2 	bl	800085c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e14c      	b.n	8000bae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 813e 	beq.w	8000ba8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0203 	and.w	r2, r3, #3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 8098 	beq.w	8000ba8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a54      	ldr	r2, [pc, #336]	; (8000bcc <HAL_GPIO_Init+0x2c8>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa2:	d019      	beq.n	8000ad8 <HAL_GPIO_Init+0x1d4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d013      	beq.n	8000ad4 <HAL_GPIO_Init+0x1d0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d00d      	beq.n	8000ad0 <HAL_GPIO_Init+0x1cc>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_Init+0x1c8>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d101      	bne.n	8000ac8 <HAL_GPIO_Init+0x1c4>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e008      	b.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000ac8:	2307      	movs	r3, #7
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000acc:	2303      	movs	r3, #3
 8000ace:	e004      	b.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e002      	b.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	f002 0203 	and.w	r2, r2, #3
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	4093      	lsls	r3, r2
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aea:	4938      	ldr	r1, [pc, #224]	; (8000bcc <HAL_GPIO_Init+0x2c8>)
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	3302      	adds	r3, #2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b1c:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b46:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b72:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f aeab 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	48000c00 	.word	0x48000c00
 8000bdc:	48001000 	.word	0x48001000
 8000be0:	58000800 	.word	0x58000800

08000be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e081      	b.n	8000cfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d106      	bne.n	8000c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fbee 	bl	80003ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2224      	movs	r2, #36	; 0x24
 8000c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0201 	bic.w	r2, r2, #1
 8000c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d107      	bne.n	8000c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	e006      	b.n	8000c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d104      	bne.n	8000c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69d9      	ldr	r1, [r3, #28]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	817b      	strh	r3, [r7, #10]
 8000d16:	460b      	mov	r3, r1
 8000d18:	813b      	strh	r3, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b20      	cmp	r3, #32
 8000d28:	f040 80f9 	bne.w	8000f1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <HAL_I2C_Mem_Write+0x34>
 8000d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0ed      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_I2C_Mem_Write+0x4e>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e0e6      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d5a:	f7ff fcb3 	bl	80006c4 <HAL_GetTick>
 8000d5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2319      	movs	r3, #25
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f000 fac3 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e0d1      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2221      	movs	r2, #33	; 0x21
 8000d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a3a      	ldr	r2, [r7, #32]
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000da4:	88f8      	ldrh	r0, [r7, #6]
 8000da6:	893a      	ldrh	r2, [r7, #8]
 8000da8:	8979      	ldrh	r1, [r7, #10]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4603      	mov	r3, r0
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f9d3 	bl	8001160 <I2C_RequestMemoryWrite>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e0a9      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d90e      	bls.n	8000df4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	8979      	ldrh	r1, [r7, #10]
 8000de4:	2300      	movs	r3, #0
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 fc2b 	bl	8001648 <I2C_TransferConfig>
 8000df2:	e00f      	b.n	8000e14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	8979      	ldrh	r1, [r7, #10]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f000 fc1a 	bl	8001648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 faad 	bl	8001378 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e07b      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d034      	beq.n	8000ecc <HAL_I2C_Mem_Write+0x1c8>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d130      	bne.n	8000ecc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	2200      	movs	r2, #0
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 fa3f 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e04d      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	2bff      	cmp	r3, #255	; 0xff
 8000e8c:	d90e      	bls.n	8000eac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	22ff      	movs	r2, #255	; 0xff
 8000e92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	8979      	ldrh	r1, [r7, #10]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 fbcf 	bl	8001648 <I2C_TransferConfig>
 8000eaa:	e00f      	b.n	8000ecc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	8979      	ldrh	r1, [r7, #10]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 fbbe 	bl	8001648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d19e      	bne.n	8000e14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 fa8c 	bl	80013f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e01a      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_I2C_Mem_Write+0x224>)
 8000efe:	400b      	ands	r3, r1
 8000f00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2220      	movs	r2, #32
 8000f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000f1e:	2302      	movs	r3, #2
  }
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	fe00e800 	.word	0xfe00e800

08000f2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	4608      	mov	r0, r1
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	817b      	strh	r3, [r7, #10]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	813b      	strh	r3, [r7, #8]
 8000f42:	4613      	mov	r3, r2
 8000f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	f040 80fd 	bne.w	800114e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_I2C_Mem_Read+0x34>
 8000f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0f1      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_I2C_Mem_Read+0x4e>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e0ea      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f82:	f7ff fb9f 	bl	80006c4 <HAL_GetTick>
 8000f86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2319      	movs	r3, #25
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f9af 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0d5      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2222      	movs	r2, #34	; 0x22
 8000fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a3a      	ldr	r2, [r7, #32]
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	893a      	ldrh	r2, [r7, #8]
 8000fd0:	8979      	ldrh	r1, [r7, #10]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f913 	bl	8001208 <I2C_RequestMemoryRead>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0ad      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2bff      	cmp	r3, #255	; 0xff
 8000ffc:	d90e      	bls.n	800101c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	22ff      	movs	r2, #255	; 0xff
 8001002:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001008:	b2da      	uxtb	r2, r3
 800100a:	8979      	ldrh	r1, [r7, #10]
 800100c:	4b52      	ldr	r3, [pc, #328]	; (8001158 <HAL_I2C_Mem_Read+0x22c>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 fb17 	bl	8001648 <I2C_TransferConfig>
 800101a:	e00f      	b.n	800103c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001020:	b29a      	uxth	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102a:	b2da      	uxtb	r2, r3
 800102c:	8979      	ldrh	r1, [r7, #10]
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <HAL_I2C_Mem_Read+0x22c>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 fb06 	bl	8001648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	2200      	movs	r2, #0
 8001044:	2104      	movs	r1, #4
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f956 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e07c      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001072:	3b01      	subs	r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108c:	b29b      	uxth	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d034      	beq.n	80010fc <HAL_I2C_Mem_Read+0x1d0>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001096:	2b00      	cmp	r3, #0
 8001098:	d130      	bne.n	80010fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f927 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e04d      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d90e      	bls.n	80010dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	8979      	ldrh	r1, [r7, #10]
 80010cc:	2300      	movs	r3, #0
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 fab7 	bl	8001648 <I2C_TransferConfig>
 80010da:	e00f      	b.n	80010fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	8979      	ldrh	r1, [r7, #10]
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 faa6 	bl	8001648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001100:	b29b      	uxth	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d19a      	bne.n	800103c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f974 	bl	80013f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e01a      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2220      	movs	r2, #32
 8001120:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_I2C_Mem_Read+0x230>)
 800112e:	400b      	ands	r3, r1
 8001130:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2220      	movs	r2, #32
 8001136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800114e:	2302      	movs	r3, #2
  }
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	80002400 	.word	0x80002400
 800115c:	fe00e800 	.word	0xfe00e800

08001160 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4603      	mov	r3, r0
 8001170:	817b      	strh	r3, [r7, #10]
 8001172:	460b      	mov	r3, r1
 8001174:	813b      	strh	r3, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	8979      	ldrh	r1, [r7, #10]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <I2C_RequestMemoryWrite+0xa4>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fa5d 	bl	8001648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	69b9      	ldr	r1, [r7, #24]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f8f0 	bl	8001378 <I2C_WaitOnTXISFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e02c      	b.n	80011fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011a8:	893b      	ldrh	r3, [r7, #8]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
 80011b2:	e015      	b.n	80011e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80011b4:	893b      	ldrh	r3, [r7, #8]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	69b9      	ldr	r1, [r7, #24]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f8d6 	bl	8001378 <I2C_WaitOnTXISFlagUntilTimeout>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e012      	b.n	80011fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011d6:	893b      	ldrh	r3, [r7, #8]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2200      	movs	r2, #0
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f884 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	80002000 	.word	0x80002000

08001208 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4603      	mov	r3, r0
 8001218:	817b      	strh	r3, [r7, #10]
 800121a:	460b      	mov	r3, r1
 800121c:	813b      	strh	r3, [r7, #8]
 800121e:	4613      	mov	r3, r2
 8001220:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	8979      	ldrh	r1, [r7, #10]
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <I2C_RequestMemoryRead+0xa4>)
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fa0a 	bl	8001648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f89d 	bl	8001378 <I2C_WaitOnTXISFlagUntilTimeout>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e02c      	b.n	80012a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800124e:	893b      	ldrh	r3, [r7, #8]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
 8001258:	e015      	b.n	8001286 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800125a:	893b      	ldrh	r3, [r7, #8]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29b      	uxth	r3, r3
 8001260:	b2da      	uxtb	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f883 	bl	8001378 <I2C_WaitOnTXISFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e012      	b.n	80012a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800127c:	893b      	ldrh	r3, [r7, #8]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	2200      	movs	r2, #0
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f831 	bl	80012f8 <I2C_WaitOnFlagUntilTimeout>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	80002000 	.word	0x80002000

080012b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d103      	bne.n	80012ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d007      	beq.n	80012ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	619a      	str	r2, [r3, #24]
  }
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001308:	e022      	b.n	8001350 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d01e      	beq.n	8001350 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001312:	f7ff f9d7 	bl	80006c4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d302      	bcc.n	8001328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d113      	bne.n	8001350 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e00f      	b.n	8001370 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699a      	ldr	r2, [r3, #24]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4013      	ands	r3, r2
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	429a      	cmp	r2, r3
 800136c:	d0cd      	beq.n	800130a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001384:	e02c      	b.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f870 	bl	8001470 <I2C_IsErrorOccurred>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e02a      	b.n	80013f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d01e      	beq.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a2:	f7ff f98f 	bl	80006c4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d302      	bcc.n	80013b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d113      	bne.n	80013e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2220      	movs	r2, #32
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e007      	b.n	80013f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d1cb      	bne.n	8001386 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001404:	e028      	b.n	8001458 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f830 	bl	8001470 <I2C_IsErrorOccurred>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e026      	b.n	8001468 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141a:	f7ff f953 	bl	80006c4 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	d302      	bcc.n	8001430 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d113      	bne.n	8001458 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e007      	b.n	8001468 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b20      	cmp	r3, #32
 8001464:	d1cf      	bne.n	8001406 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	d075      	beq.n	8001588 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2210      	movs	r2, #16
 80014a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014a4:	e056      	b.n	8001554 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d052      	beq.n	8001554 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014ae:	f7ff f909 	bl	80006c4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d302      	bcc.n	80014c4 <I2C_IsErrorOccurred+0x54>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d147      	bne.n	8001554 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014e6:	d12e      	bne.n	8001546 <I2C_IsErrorOccurred+0xd6>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ee:	d02a      	beq.n	8001546 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d027      	beq.n	8001546 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001504:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001506:	f7ff f8dd 	bl	80006c4 <HAL_GetTick>
 800150a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800150c:	e01b      	b.n	8001546 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800150e:	f7ff f8d9 	bl	80006c4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b19      	cmp	r3, #25
 800151a:	d914      	bls.n	8001546 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b20      	cmp	r3, #32
 8001552:	d1dc      	bne.n	800150e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	2b20      	cmp	r3, #32
 8001560:	d003      	beq.n	800156a <I2C_IsErrorOccurred+0xfa>
 8001562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001566:	2b00      	cmp	r3, #0
 8001568:	d09d      	beq.n	80014a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800156a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2220      	movs	r2, #32
 8001578:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80015f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01c      	beq.n	8001638 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fe56 	bl	80012b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6859      	ldr	r1, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <I2C_IsErrorOccurred+0x1d4>)
 8001610:	400b      	ands	r3, r1
 8001612:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800163c:	4618      	mov	r0, r3
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	fe00e800 	.word	0xfe00e800

08001648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	4613      	mov	r3, r2
 8001658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001660:	7a7b      	ldrb	r3, [r7, #9]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001668:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	4313      	orrs	r3, r2
 8001672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001676:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	0d5b      	lsrs	r3, r3, #21
 8001682:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <I2C_TransferConfig+0x60>)
 8001688:	430b      	orrs	r3, r1
 800168a:	43db      	mvns	r3, r3
 800168c:	ea02 0103 	and.w	r1, r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	03ff63ff 	.word	0x03ff63ff

080016ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d138      	bne.n	8001734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e032      	b.n	8001736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b20      	cmp	r3, #32
 8001756:	d139      	bne.n	80017cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001762:	2302      	movs	r3, #2
 8001764:	e033      	b.n	80017ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2224      	movs	r2, #36	; 0x24
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017cc:	2302      	movs	r3, #2
  }
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400

080017fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_PWREx_GetVoltageRange+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	58000400 	.word	0x58000400

08001818 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800182a:	d101      	bne.n	8001830 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800188a:	d101      	bne.n	8001890 <LL_RCC_HSE_IsReady+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_RCC_HSE_IsReady+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d101      	bne.n	80018f0 <LL_RCC_HSI_IsReady+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_RCC_HSI_IsReady+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d101      	bne.n	8001982 <LL_RCC_HSI48_IsReady+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_RCC_HSI48_IsReady+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d101      	bne.n	8001a2e <LL_RCC_LSE_IsReady+0x18>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_RCC_LSE_IsReady+0x1a>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d101      	bne.n	8001a96 <LL_RCC_LSI1_IsReady+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_RCC_LSI1_IsReady+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d101      	bne.n	8001afe <LL_RCC_LSI2_IsReady+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_RCC_LSI2_IsReady+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6013      	str	r3, [r2, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d101      	bne.n	8001b8a <LL_RCC_MSI_IsReady+0x16>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_RCC_MSI_IsReady+0x18>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd4:	d901      	bls.n	8001bda <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001bd6:	23b0      	movs	r3, #176	; 0xb0
 8001bd8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 0203 	bic.w	r2, r3, #3
 8001c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da6:	d101      	bne.n	8001dac <LL_RCC_PLL_IsReady+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_RCC_PLL_IsReady+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d101      	bne.n	8001e32 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e52:	d101      	bne.n	8001e58 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d101      	bne.n	8001e7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e9c:	d101      	bne.n	8001ea2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ec0:	d101      	bne.n	8001ec6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b08d      	sub	sp, #52	; 0x34
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e363      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 808d 	beq.w	800200e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	f7ff fea1 	bl	8001c3a <LL_RCC_GetSysClkSource>
 8001ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efa:	f7ff ff82 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8001efe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3e>
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d147      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d144      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e347      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f22:	f7ff fe4c 	bl	8001bbe <LL_RCC_MSI_GetRange>
 8001f26:	4603      	mov	r3, r0
 8001f28:	429c      	cmp	r4, r3
 8001f2a:	d914      	bls.n	8001f56 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fd05 	bl	8002940 <RCC_SetFlashLatencyFromMSIRange>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e336      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe26 	bl	8001b96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe4a 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe1b 	bl	8001b96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe3f 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fce6 	bl	8002940 <RCC_SetFlashLatencyFromMSIRange>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e317      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f7e:	f000 fccb 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4aa4      	ldr	r2, [pc, #656]	; (8002218 <HAL_RCC_OscConfig+0x344>)
 8001f86:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f88:	4ba4      	ldr	r3, [pc, #656]	; (800221c <HAL_RCC_OscConfig+0x348>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fb4b 	bl	8000628 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d039      	beq.n	800200c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e308      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01e      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa4:	f7ff fdc8 	bl	8001b38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fb8c 	bl	80006c4 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fb88 	bl	80006c4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e2f5      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fc2:	f7ff fdd7 	bl	8001b74 <LL_RCC_MSI_IsReady>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f1      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fde0 	bl	8001b96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe04 	bl	8001be8 <LL_RCC_MSI_SetCalibTrimming>
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fe2:	f7ff fdb8 	bl	8001b56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fb6d 	bl	80006c4 <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7fe fb69 	bl	80006c4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2d6      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002000:	f7ff fdb8 	bl	8001b74 <LL_RCC_MSI_IsReady>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x11a>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800200c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d047      	beq.n	80020aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	f7ff fe0e 	bl	8001c3a <LL_RCC_GetSysClkSource>
 800201e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	f7ff feef 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8002024:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x164>
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d134      	bne.n	80020aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e2b4      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x180>
 800204e:	f7ff fbf5 	bl	800183c <LL_RCC_HSE_Enable>
 8002052:	e001      	b.n	8002058 <HAL_RCC_OscConfig+0x184>
 8002054:	f7ff fc01 	bl	800185a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fb30 	bl	80006c4 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fb2c 	bl	80006c4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e299      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800207a:	f7ff fbfd 	bl	8001878 <LL_RCC_HSE_IsReady>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f1      	beq.n	8002068 <HAL_RCC_OscConfig+0x194>
 8002084:	e011      	b.n	80020aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fb1d 	bl	80006c4 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7fe fb19 	bl	80006c4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e286      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020a0:	f7ff fbea 	bl	8001878 <LL_RCC_HSE_IsReady>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04c      	beq.n	8002150 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	f7ff fdc0 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80020ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	f7ff fea1 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 80020c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_OscConfig+0x200>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d10e      	bne.n	80020ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e266      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc09 	bl	80018fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020ea:	e031      	b.n	8002150 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	f7ff fbd2 	bl	800189c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fae4 	bl	80006c4 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe fae0 	bl	80006c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e24d      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002112:	f7ff fbe1 	bl	80018d8 <LL_RCC_HSI_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f1      	beq.n	8002100 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fbeb 	bl	80018fc <LL_RCC_HSI_SetCalibTrimming>
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002128:	f7ff fbc7 	bl	80018ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe faca 	bl	80006c4 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fac6 	bl	80006c4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e233      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002146:	f7ff fbc7 	bl	80018d8 <LL_RCC_HSI_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f1      	bne.n	8002134 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a3 	beq.w	80022b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d076      	beq.n	8002260 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d046      	beq.n	800220c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800217e:	f7ff fc7e 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d113      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002188:	f7ff fc57 	bl	8001a3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800218c:	f7fe fa9a 	bl	80006c4 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002194:	f7fe fa96 	bl	80006c4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e203      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021a6:	f7ff fc6a 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80021b0:	f7ff fc77 	bl	8001aa2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fa86 	bl	80006c4 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021bc:	f7fe fa82 	bl	80006c4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ef      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021ce:	f7ff fc8a 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f1      	beq.n	80021bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fc94 	bl	8001b0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80021e2:	f7ff fc3b 	bl	8001a5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fa6d 	bl	80006c4 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ee:	f7fe fa69 	bl	80006c4 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1d6      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002200:	f7ff fc3d 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x31a>
 800220a:	e051      	b.n	80022b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800220c:	f7ff fc15 	bl	8001a3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fa58 	bl	80006c4 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002216:	e00c      	b.n	8002232 <HAL_RCC_OscConfig+0x35e>
 8002218:	20000008 	.word	0x20000008
 800221c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002220:	f7fe fa50 	bl	80006c4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1bd      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002232:	f7ff fc24 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800223c:	f7ff fc42 	bl	8001ac4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002242:	f7fe fa3f 	bl	80006c4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1ac      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002254:	f7ff fc47 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x36e>
 800225e:	e027      	b.n	80022b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002260:	f7ff fc30 	bl	8001ac4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe fa2e 	bl	80006c4 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800226c:	f7fe fa2a 	bl	80006c4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e197      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800227e:	f7ff fc32 	bl	8001ae6 <LL_RCC_LSI2_IsReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f1      	bne.n	800226c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002288:	f7ff fbe8 	bl	8001a5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fa1a 	bl	80006c4 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002294:	f7fe fa16 	bl	80006c4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e183      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022a6:	f7ff fbea 	bl	8001a7e <LL_RCC_LSI1_IsReady>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f1      	bne.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4ba7      	ldr	r3, [pc, #668]	; (800255c <HAL_RCC_OscConfig+0x688>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d114      	bne.n	80022f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022c8:	f7ff fa88 	bl	80017dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7fe f9fa 	bl	80006c4 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe f9f6 	bl	80006c4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e163      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b9d      	ldr	r3, [pc, #628]	; (800255c <HAL_RCC_OscConfig+0x688>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x42c>
 80022fa:	f7ff fb48 	bl	800198e <LL_RCC_LSE_Enable>
 80022fe:	e00c      	b.n	800231a <HAL_RCC_OscConfig+0x446>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d104      	bne.n	8002312 <HAL_RCC_OscConfig+0x43e>
 8002308:	f7ff fb63 	bl	80019d2 <LL_RCC_LSE_EnableBypass>
 800230c:	f7ff fb3f 	bl	800198e <LL_RCC_LSE_Enable>
 8002310:	e003      	b.n	800231a <HAL_RCC_OscConfig+0x446>
 8002312:	f7ff fb4d 	bl	80019b0 <LL_RCC_LSE_Disable>
 8002316:	f7ff fb6d 	bl	80019f4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d014      	beq.n	800234c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe f9cf 	bl	80006c4 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe f9cb 	bl	80006c4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e136      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002340:	f7ff fb69 	bl	8001a16 <LL_RCC_LSE_IsReady>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ef      	beq.n	800232a <HAL_RCC_OscConfig+0x456>
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe f9ba 	bl	80006c4 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe f9b6 	bl	80006c4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e121      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800236a:	f7ff fb54 	bl	8001a16 <LL_RCC_LSE_IsReady>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ef      	bne.n	8002354 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02c      	beq.n	80023da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d014      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002388:	f7ff facd 	bl	8001926 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe f99a 	bl	80006c4 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002394:	f7fe f996 	bl	80006c4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e103      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023a6:	f7ff fae0 	bl	800196a <LL_RCC_HSI48_IsReady>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_OscConfig+0x4c0>
 80023b0:	e013      	b.n	80023da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023b2:	f7ff fac9 	bl	8001948 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe f985 	bl	80006c4 <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023be:	f7fe f981 	bl	80006c4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0ee      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023d0:	f7ff facb 	bl	800196a <LL_RCC_HSI48_IsReady>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f1      	bne.n	80023be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80e4 	beq.w	80025ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e4:	f7ff fc29 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80023e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	f040 80b4 	bne.w	8002564 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	429a      	cmp	r2, r3
 8002408:	d123      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d11c      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d114      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d10d      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d05d      	beq.n	800250e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d058      	beq.n	800250a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0a1      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800246a:	f7ff fc84 	bl	8001d76 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246e:	f7fe f929 	bl	80006c4 <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe f925 	bl	80006c4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e092      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x68c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ae:	0212      	lsls	r2, r2, #8
 80024b0:	4311      	orrs	r1, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c2:	430a      	orrs	r2, r1
 80024c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024cc:	f7ff fc44 	bl	8001d58 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7fe f8f0 	bl	80006c4 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe f8ec 	bl	80006c4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e059      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	e050      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04f      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d147      	bne.n	80025ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800251c:	f7ff fc1c 	bl	8001d58 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002530:	f7fe f8c8 	bl	80006c4 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe f8c4 	bl	80006c4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e031      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCC_OscConfig+0x664>
 8002558:	e028      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
 800255a:	bf00      	nop
 800255c:	58000400 	.word	0x58000400
 8002560:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d01e      	beq.n	80025a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	f7ff fc04 	bl	8001d76 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe f8a9 	bl	80006c4 <HAL_GetTick>
 8002572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe f8a5 	bl	80006c4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e012      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_OscConfig+0x6e4>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
 80025a6:	e001      	b.n	80025ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3734      	adds	r7, #52	; 0x34
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	eefefffc 	.word	0xeefefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e12d      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b98      	ldr	r3, [pc, #608]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d91b      	bls.n	8002616 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b95      	ldr	r3, [pc, #596]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4993      	ldr	r1, [pc, #588]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ee:	f7fe f869 	bl	80006c4 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025f6:	f7fe f865 	bl	80006c4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e111      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	4b8a      	ldr	r3, [pc, #552]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fb13 	bl	8001c52 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800262c:	f7fe f84a 	bl	80006c4 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002634:	f7fe f846 	bl	80006c4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0f2      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002646:	f7ff fbe8 	bl	8001e1a <LL_RCC_IsActiveFlag_HPRE>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f1      	beq.n	8002634 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d016      	beq.n	800268a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb0a 	bl	8001c7a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002666:	f7fe f82d 	bl	80006c4 <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800266e:	f7fe f829 	bl	80006c4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0d5      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002680:	f7ff fbdd 	bl	8001e3e <LL_RCC_IsActiveFlag_C2HPRE>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f1      	beq.n	800266e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb03 	bl	8001ca6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026a0:	f7fe f810 	bl	80006c4 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026a8:	f7fe f80c 	bl	80006c4 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0b8      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ba:	f7ff fbd3 	bl	8001e64 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f1      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fafd 	bl	8001cd4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026da:	f7fd fff3 	bl	80006c4 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026e2:	f7fd ffef 	bl	80006c4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e09b      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026f4:	f7ff fbc9 	bl	8001e8a <LL_RCC_IsActiveFlag_PPRE1>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f1      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d017      	beq.n	800273a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff faf3 	bl	8001cfc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002716:	f7fd ffd5 	bl	80006c4 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800271e:	f7fd ffd1 	bl	80006c4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e07d      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002730:	f7ff fbbd 	bl	8001eae <LL_RCC_IsActiveFlag_PPRE2>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d043      	beq.n	80027ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d106      	bne.n	800275c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800274e:	f7ff f893 	bl	8001878 <LL_RCC_HSE_IsReady>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11e      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e067      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002764:	f7ff fb16 	bl	8001d94 <LL_RCC_PLL_IsReady>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e05c      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800277a:	f7ff f9fb 	bl	8001b74 <LL_RCC_MSI_IsReady>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e051      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002788:	f7ff f8a6 	bl	80018d8 <LL_RCC_HSI_IsReady>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e04a      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fa39 	bl	8001c12 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fd ff90 	bl	80006c4 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fd ff8c 	bl	80006c4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e036      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	f7ff fa3c 	bl	8001c3a <LL_RCC_GetSysClkSource>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d1ec      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d21b      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0207 	bic.w	r2, r3, #7
 80027e4:	4913      	ldr	r1, [pc, #76]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fd ff6a 	bl	80006c4 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f4:	f7fd ff66 	bl	80006c4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e012      	b.n	800282c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x278>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ef      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002814:	f000 f880 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002818:	4603      	mov	r3, r0
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_RCC_ClockConfig+0x27c>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800281e:	f7fd ff5d 	bl	80006dc <HAL_GetTickPrio>
 8002822:	4603      	mov	r3, r0
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd feff 	bl	8000628 <HAL_InitTick>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58004000 	.word	0x58004000
 8002838:	20000008 	.word	0x20000008

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002842:	f7ff f9fa 	bl	8001c3a <LL_RCC_GetSysClkSource>
 8002846:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800284e:	f7ff f9b6 	bl	8001bbe <LL_RCC_MSI_GetRange>
 8002852:	4603      	mov	r3, r0
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_RCC_GetSysClockFreq+0xcc>)
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e04b      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d102      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e045      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d10a      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002876:	f7fe ffcf 	bl	8001818 <LL_RCC_HSE_IsEnabledDiv2>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e03a      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e037      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800288c:	f7ff fab9 	bl	8001e02 <LL_RCC_PLL_GetMainSource>
 8002890:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d003      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x64>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x6a>
 800289e:	e00d      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0xd0>)
 80028a2:	60bb      	str	r3, [r7, #8]
        break;
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028a6:	f7fe ffb7 	bl	8001818 <LL_RCC_HSE_IsEnabledDiv2>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028b2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028b4:	e00d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd8>)
 80028b8:	60bb      	str	r3, [r7, #8]
        break;
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028bc:	f7ff f97f 	bl	8001bbe <LL_RCC_MSI_GetRange>
 80028c0:	4603      	mov	r3, r0
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	60bb      	str	r3, [r7, #8]
        break;
 80028d0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80028d2:	f7ff fa71 	bl	8001db8 <LL_RCC_PLL_GetN>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	fb03 f402 	mul.w	r4, r3, r2
 80028de:	f7ff fa84 	bl	8001dea <LL_RCC_PLL_GetDivider>
 80028e2:	4603      	mov	r3, r0
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	3301      	adds	r3, #1
 80028e8:	fbb4 f4f3 	udiv	r4, r4, r3
 80028ec:	f7ff fa71 	bl	8001dd2 <LL_RCC_PLL_GetR>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0f5b      	lsrs	r3, r3, #29
 80028f4:	3301      	adds	r3, #1
 80028f6:	fbb4 f3f3 	udiv	r3, r4, r3
 80028fa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	08003c18 	.word	0x08003c18
 800290c:	00f42400 	.word	0x00f42400
 8002910:	003d0900 	.word	0x003d0900
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b598      	push	{r3, r4, r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800291c:	f7ff ff8e 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8002920:	4604      	mov	r4, r0
 8002922:	f7ff f9ff 	bl	8001d24 <LL_RCC_GetAHBPrescaler>
 8002926:	4603      	mov	r3, r0
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x24>)
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd98      	pop	{r3, r4, r7, pc}
 800293c:	08003bd8 	.word	0x08003bd8

08002940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2bb0      	cmp	r3, #176	; 0xb0
 800294c:	d903      	bls.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e007      	b.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002966:	f7ff f9e9 	bl	8001d3c <LL_RCC_GetAHB4Prescaler>
 800296a:	4603      	mov	r3, r0
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	0c9c      	lsrs	r4, r3, #18
 800298a:	f7fe ff37 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 800298e:	4603      	mov	r3, r0
 8002990:	4619      	mov	r1, r3
 8002992:	4620      	mov	r0, r4
 8002994:	f000 f80c 	bl	80029b0 <RCC_SetFlashLatency>
 8002998:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08003c18 	.word	0x08003c18
 80029a8:	08003bd8 	.word	0x08003bd8
 80029ac:	431bde83 	.word	0x431bde83

080029b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b093      	sub	sp, #76	; 0x4c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <RCC_SetFlashLatency+0xe8>)
 80029bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <RCC_SetFlashLatency+0xec>)
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <RCC_SetFlashLatency+0xf0>)
 80029d4:	f107 040c 	add.w	r4, r7, #12
 80029d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029de:	2300      	movs	r3, #0
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d11a      	bne.n	8002a20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	643b      	str	r3, [r7, #64]	; 0x40
 80029ee:	e013      	b.n	8002a18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3348      	adds	r3, #72	; 0x48
 80029f6:	443b      	add	r3, r7
 80029f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d807      	bhi.n	8002a12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3348      	adds	r3, #72	; 0x48
 8002a08:	443b      	add	r3, r7
 8002a0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a10:	e020      	b.n	8002a54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	3301      	adds	r3, #1
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d9e8      	bls.n	80029f0 <RCC_SetFlashLatency+0x40>
 8002a1e:	e019      	b.n	8002a54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a24:	e013      	b.n	8002a4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3348      	adds	r3, #72	; 0x48
 8002a2c:	443b      	add	r3, r7
 8002a2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d807      	bhi.n	8002a48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3348      	adds	r3, #72	; 0x48
 8002a3e:	443b      	add	r3, r7
 8002a40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a46:	e005      	b.n	8002a54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d9e8      	bls.n	8002a26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <RCC_SetFlashLatency+0xf4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <RCC_SetFlashLatency+0xf4>)
 8002a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a64:	f7fd fe2e 	bl	80006c4 <HAL_GetTick>
 8002a68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a6a:	e008      	b.n	8002a7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a6c:	f7fd fe2a 	bl	80006c4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e007      	b.n	8002a8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <RCC_SetFlashLatency+0xf4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1ef      	bne.n	8002a6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	374c      	adds	r7, #76	; 0x4c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08003bac 	.word	0x08003bac
 8002a9c:	08003bbc 	.word	0x08003bbc
 8002aa0:	08003bc8 	.word	0x08003bc8
 8002aa4:	58004000 	.word	0x58004000

08002aa8 <LL_RCC_LSE_IsEnabled>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <LL_RCC_LSE_IsEnabled+0x18>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_LSE_IsReady>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d101      	bne.n	8002ae4 <LL_RCC_LSE_IsReady+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_RCC_LSE_IsReady+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_SetRFWKPClockSource>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_SetSMPSClockSource>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_SetSMPSPrescaler>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_SetUSARTClockSource>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f023 0203 	bic.w	r2, r3, #3
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_SetLPUARTClockSource>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_SetI2CClockSource>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_SetLPTIMClockSource>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	43db      	mvns	r3, r3
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_SetSAIClockSource>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_SetRNGClockSource>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_RCC_SetCLK48ClockSource>:
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_SetUSBClockSource>:
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffe3 	bl	8002c8a <LL_RCC_SetCLK48ClockSource>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <LL_RCC_SetADCClockSource>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_SetRTCClockSource>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_GetRTCClockSource>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_ForceBackupDomainReset>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_RCC_PLLSAI1_Enable>:
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d94:	6013      	str	r3, [r2, #0]
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_PLLSAI1_Disable>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_PLLSAI1_IsReady>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002dea:	2300      	movs	r3, #0
 8002dec:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002dee:	2300      	movs	r3, #0
 8002df0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d034      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e06:	d021      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e0c:	d81b      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e12:	d01d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e18:	d815      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e22:	d110      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e34:	e00d      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f947 	bl	80030ce <RCCEx_PLLSAI1_ConfigNP>
 8002e40:	4603      	mov	r3, r0
 8002e42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e44:	e005      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	77fb      	strb	r3, [r7, #31]
        break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fee8 	bl	8002c32 <LL_RCC_SetSAIClockSource>
 8002e62:	e001      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d046      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e74:	f7ff ff56 	bl	8002d24 <LL_RCC_GetRTCClockSource>
 8002e78:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d03c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e84:	f7fe fcaa 	bl	80017dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff30 	bl	8002cf8 <LL_RCC_SetRTCClockSource>
 8002e98:	e02e      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ea4:	f7ff ff4b 	bl	8002d3e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ea8:	f7ff ff5a 	bl	8002d60 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ec4:	f7ff fdf0 	bl	8002aa8 <LL_RCC_LSE_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d114      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ece:	f7fd fbf9 	bl	80006c4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ed4:	e00b      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fd fbf5 	bl	80006c4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d902      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	77fb      	strb	r3, [r7, #31]
              break;
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002eee:	f7ff fded 	bl	8002acc <LL_RCC_LSE_IsReady>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d1ee      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	77bb      	strb	r3, [r7, #30]
 8002efc:	e001      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fe2a 	bl	8002b6c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fe35 	bl	8002b98 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe5d 	bl	8002bfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fe52 	bl	8002bfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe2a 	bl	8002bc4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe1f 	bl	8002bc4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d022      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe8d 	bl	8002cb6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f8dd 	bl	8003184 <RCCEx_PLLSAI1_ConfigNQ>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff6:	d003      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fe2a 	bl	8002c5e <LL_RCC_SetRNGClockSource>
 800300a:	e00a      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fe21 	bl	8002c5e <LL_RCC_SetRNGClockSource>
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fe34 	bl	8002c8a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800302a:	d107      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d022      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe3d 	bl	8002ccc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305a:	d107      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003074:	d10b      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f8dd 	bl	800323a <RCCEx_PLLSAI1_ConfigNR>
 8003080:	4603      	mov	r3, r0
 8003082:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fd26 	bl	8002af0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fd45 	bl	8002b44 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fd2c 	bl	8002b1c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80030c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030da:	f7ff fe61 	bl	8002da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030de:	f7fd faf1 	bl	80006c4 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030e4:	e009      	b.n	80030fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e6:	f7fd faed 	bl	80006c4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e004      	b.n	8003104 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030fa:	f7ff fe60 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d137      	bne.n	800317a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003134:	4313      	orrs	r3, r2
 8003136:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003138:	f7ff fe23 	bl	8002d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fd fac2 	bl	80006c4 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fd fabe 	bl	80006c4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e004      	b.n	8003162 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003158:	f7ff fe31 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1f0      	bne.n	8003144 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003190:	f7ff fe06 	bl	8002da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003194:	f7fd fa96 	bl	80006c4 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800319a:	e009      	b.n	80031b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800319c:	f7fd fa92 	bl	80006c4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	73fb      	strb	r3, [r7, #15]
      break;
 80031ae:	e004      	b.n	80031ba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031b0:	f7ff fe05 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d137      	bne.n	8003230 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d4:	4313      	orrs	r3, r2
 80031d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ea:	4313      	orrs	r3, r2
 80031ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031ee:	f7ff fdc8 	bl	8002d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f2:	f7fd fa67 	bl	80006c4 <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f8:	e009      	b.n	800320e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fa:	f7fd fa63 	bl	80006c4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	73fb      	strb	r3, [r7, #15]
        break;
 800320c:	e004      	b.n	8003218 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800320e:	f7ff fdd6 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d1f0      	bne.n	80031fa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322c:	4313      	orrs	r3, r2
 800322e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003246:	f7ff fdab 	bl	8002da0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800324a:	f7fd fa3b 	bl	80006c4 <HAL_GetTick>
 800324e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003250:	e009      	b.n	8003266 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003252:	f7fd fa37 	bl	80006c4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d902      	bls.n	8003266 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e004      	b.n	8003270 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003266:	f7ff fdaa 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d137      	bne.n	80032e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032a4:	f7ff fd6d 	bl	8002d82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd fa0c 	bl	80006c4 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ae:	e009      	b.n	80032c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b0:	f7fd fa08 	bl	80006c4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	73fb      	strb	r3, [r7, #15]
        break;
 80032c2:	e004      	b.n	80032ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032c4:	f7ff fd7b 	bl	8002dbe <LL_RCC_PLLSAI1_IsReady>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d1f0      	bne.n	80032b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e2:	4313      	orrs	r3, r2
 80032e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <begin>:
uint8_t revisionID;
sense_struct sense;
uint8_t _i2caddr = MAX30105_ADDRESS;
extern I2C_HandleTypeDef hi2c1;

uint8_t begin(void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80032f4:	f000 f94a 	bl	800358c <readPartID>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b15      	cmp	r3, #21
 80032fc:	d001      	beq.n	8003302 <begin+0x12>
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 80032fe:	2300      	movs	r3, #0
 8003300:	e002      	b.n	8003308 <begin+0x18>
  }
  // Populate revision ID
  readRevisionID();
 8003302:	f000 f951 	bl	80035a8 <readRevisionID>
  return true;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}

0800330c <softReset>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void softReset(void) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	21bf      	movs	r1, #191	; 0xbf
 8003316:	2009      	movs	r0, #9
 8003318:	f000 fb98 	bl	8003a4c <bitMask>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = HAL_GetTick();
 800331c:	f7fd f9d2 	bl	80006c4 <HAL_GetTick>
 8003320:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() - startTime < 100)
 8003322:	e00f      	b.n	8003344 <softReset+0x38>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <softReset+0x54>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2109      	movs	r1, #9
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fbb4 	bl	8003a98 <readRegister8>
 8003330:	4603      	mov	r3, r0
 8003332:	70fb      	strb	r3, [r7, #3]
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <softReset+0x48>
    HAL_Delay(1); //Let's not over burden the I2C bus
 800333e:	2001      	movs	r0, #1
 8003340:	f7fd f9d8 	bl	80006f4 <HAL_Delay>
  while (HAL_GetTick() - startTime < 100)
 8003344:	f7fd f9be 	bl	80006c4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b63      	cmp	r3, #99	; 0x63
 8003350:	d9e8      	bls.n	8003324 <softReset+0x18>
  }
}
 8003352:	e000      	b.n	8003356 <softReset+0x4a>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 8003354:	bf00      	nop
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000011 	.word	0x20000011

08003364 <setLEDMode>:
void wakeUp(void) {
  // Pull IC out of low power mode (datasheet pg. 19)
  bitMask(MAX30105_MODECONFIG, MAX30105_SHUTDOWN_MASK, MAX30105_WAKEUP);
}

void setLEDMode(uint8_t mode) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	461a      	mov	r2, r3
 8003372:	21f8      	movs	r1, #248	; 0xf8
 8003374:	2009      	movs	r0, #9
 8003376:	f000 fb69 	bl	8003a4c <bitMask>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <setADCRange>:

void setADCRange(uint8_t adcRange) {
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	461a      	mov	r2, r3
 8003390:	219f      	movs	r1, #159	; 0x9f
 8003392:	200a      	movs	r0, #10
 8003394:	f000 fb5a 	bl	8003a4c <bitMask>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <setSampleRate>:

void setSampleRate(uint8_t sampleRate) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	461a      	mov	r2, r3
 80033ae:	21e3      	movs	r1, #227	; 0xe3
 80033b0:	200a      	movs	r0, #10
 80033b2:	f000 fb4b 	bl	8003a4c <bitMask>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <setPulseWidth>:

void setPulseWidth(uint8_t pulseWidth) {
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	461a      	mov	r2, r3
 80033cc:	21fc      	movs	r1, #252	; 0xfc
 80033ce:	200a      	movs	r0, #10
 80033d0:	f000 fb3c 	bl	8003a4c <bitMask>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <setPulseAmplitudeRed>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void setPulseAmplitudeRed(uint8_t amplitude) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <setPulseAmplitudeRed+0x20>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	79fa      	ldrb	r2, [r7, #7]
 80033ec:	210c      	movs	r1, #12
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fb7e 	bl	8003af0 <writeRegister8>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000011 	.word	0x20000011

08003400 <setPulseAmplitudeIR>:

void setPulseAmplitudeIR(uint8_t amplitude) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <setPulseAmplitudeIR+0x20>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	79fa      	ldrb	r2, [r7, #7]
 8003410:	210d      	movs	r1, #13
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb6c 	bl	8003af0 <writeRegister8>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000011 	.word	0x20000011

08003424 <setPulseAmplitudeGreen>:

void setPulseAmplitudeGreen(uint8_t amplitude) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <setPulseAmplitudeGreen+0x20>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	210e      	movs	r1, #14
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb5a 	bl	8003af0 <writeRegister8>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000011 	.word	0x20000011

08003448 <setPulseAmplitudeProximity>:

void setPulseAmplitudeProximity(uint8_t amplitude) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <setPulseAmplitudeProximity+0x20>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	2110      	movs	r1, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb48 	bl	8003af0 <writeRegister8>
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000011 	.word	0x20000011

0800346c <enableSlot>:

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void enableSlot(uint8_t slotNumber, uint8_t device) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	460a      	mov	r2, r1
 8003476:	71fb      	strb	r3, [r7, #7]
 8003478:	4613      	mov	r3, r2
 800347a:	71bb      	strb	r3, [r7, #6]

  uint8_t originalContents;

  switch (slotNumber) {
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	3b01      	subs	r3, #1
 8003480:	2b03      	cmp	r3, #3
 8003482:	d82b      	bhi.n	80034dc <enableSlot+0x70>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <enableSlot+0x20>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034ab 	.word	0x080034ab
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034cb 	.word	0x080034cb
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 800349c:	79bb      	ldrb	r3, [r7, #6]
 800349e:	461a      	mov	r2, r3
 80034a0:	21f8      	movs	r1, #248	; 0xf8
 80034a2:	2011      	movs	r0, #17
 80034a4:	f000 fad2 	bl	8003a4c <bitMask>
      break;
 80034a8:	e019      	b.n	80034de <enableSlot+0x72>
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80034aa:	79bb      	ldrb	r3, [r7, #6]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	218f      	movs	r1, #143	; 0x8f
 80034b4:	2011      	movs	r0, #17
 80034b6:	f000 fac9 	bl	8003a4c <bitMask>
      break;
 80034ba:	e010      	b.n	80034de <enableSlot+0x72>
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80034bc:	79bb      	ldrb	r3, [r7, #6]
 80034be:	461a      	mov	r2, r3
 80034c0:	21f8      	movs	r1, #248	; 0xf8
 80034c2:	2012      	movs	r0, #18
 80034c4:	f000 fac2 	bl	8003a4c <bitMask>
      break;
 80034c8:	e009      	b.n	80034de <enableSlot+0x72>
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80034ca:	79bb      	ldrb	r3, [r7, #6]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	218f      	movs	r1, #143	; 0x8f
 80034d4:	2012      	movs	r0, #18
 80034d6:	f000 fab9 	bl	8003a4c <bitMask>
      break;
 80034da:	e000      	b.n	80034de <enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 80034dc:	bf00      	nop
  }
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop

080034e8 <setFIFOAverage>:
//
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void setFIFOAverage(uint8_t numberOfSamples) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	461a      	mov	r2, r3
 80034f6:	211f      	movs	r1, #31
 80034f8:	2008      	movs	r0, #8
 80034fa:	f000 faa7 	bl	8003a4c <bitMask>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <clearFIFO>:

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void clearFIFO(void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <clearFIFO+0x34>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	2104      	movs	r1, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f000 faeb 	bl	8003af0 <writeRegister8>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <clearFIFO+0x34>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	2105      	movs	r1, #5
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fae4 	bl	8003af0 <writeRegister8>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <clearFIFO+0x34>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	2106      	movs	r1, #6
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fadd 	bl	8003af0 <writeRegister8>
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000011 	.word	0x20000011

08003540 <enableFIFORollover>:

//Enable roll over if FIFO over flows
void enableFIFORollover(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 8003544:	2210      	movs	r2, #16
 8003546:	21ef      	movs	r1, #239	; 0xef
 8003548:	2008      	movs	r0, #8
 800354a:	f000 fa7f 	bl	8003a4c <bitMask>
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <getWritePointer>:
void setFIFOAlmostFull(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t getWritePointer(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <getWritePointer+0x18>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2104      	movs	r1, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa9a 	bl	8003a98 <readRegister8>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000011 	.word	0x20000011

08003570 <getReadPointer>:

//Read the FIFO Read Pointer
uint8_t getReadPointer(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <getReadPointer+0x18>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2106      	movs	r1, #6
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa8c 	bl	8003a98 <readRegister8>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000011 	.word	0x20000011

0800358c <readPartID>:


//
// Device ID and Revision
//
uint8_t readPartID() {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  return readRegister8(_i2caddr, MAX30105_PARTID);
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <readPartID+0x18>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa7e 	bl	8003a98 <readRegister8>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000011 	.word	0x20000011

080035a8 <readRevisionID>:

void readRevisionID() {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <readRevisionID+0x1c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	21fe      	movs	r1, #254	; 0xfe
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa70 	bl	8003a98 <readRegister8>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b02      	ldr	r3, [pc, #8]	; (80035c8 <readRevisionID+0x20>)
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000011 	.word	0x20000011
 80035c8:	2000008d 	.word	0x2000008d

080035cc <setup>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
 80035d8:	460b      	mov	r3, r1
 80035da:	71bb      	strb	r3, [r7, #6]
 80035dc:	4613      	mov	r3, r2
 80035de:	717b      	strb	r3, [r7, #5]
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80035e0:	f7ff fe94 	bl	800330c <softReset>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d103      	bne.n	80035f2 <setup+0x26>
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff ff7c 	bl	80034e8 <setFIFOAverage>
 80035f0:	e025      	b.n	800363e <setup+0x72>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80035f2:	79bb      	ldrb	r3, [r7, #6]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d103      	bne.n	8003600 <setup+0x34>
 80035f8:	2020      	movs	r0, #32
 80035fa:	f7ff ff75 	bl	80034e8 <setFIFOAverage>
 80035fe:	e01e      	b.n	800363e <setup+0x72>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d103      	bne.n	800360e <setup+0x42>
 8003606:	2040      	movs	r0, #64	; 0x40
 8003608:	f7ff ff6e 	bl	80034e8 <setFIFOAverage>
 800360c:	e017      	b.n	800363e <setup+0x72>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 800360e:	79bb      	ldrb	r3, [r7, #6]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d103      	bne.n	800361c <setup+0x50>
 8003614:	2060      	movs	r0, #96	; 0x60
 8003616:	f7ff ff67 	bl	80034e8 <setFIFOAverage>
 800361a:	e010      	b.n	800363e <setup+0x72>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 800361c:	79bb      	ldrb	r3, [r7, #6]
 800361e:	2b10      	cmp	r3, #16
 8003620:	d103      	bne.n	800362a <setup+0x5e>
 8003622:	2080      	movs	r0, #128	; 0x80
 8003624:	f7ff ff60 	bl	80034e8 <setFIFOAverage>
 8003628:	e009      	b.n	800363e <setup+0x72>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 800362a:	79bb      	ldrb	r3, [r7, #6]
 800362c:	2b20      	cmp	r3, #32
 800362e:	d103      	bne.n	8003638 <setup+0x6c>
 8003630:	20a0      	movs	r0, #160	; 0xa0
 8003632:	f7ff ff59 	bl	80034e8 <setFIFOAverage>
 8003636:	e002      	b.n	800363e <setup+0x72>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);
 8003638:	2040      	movs	r0, #64	; 0x40
 800363a:	f7ff ff55 	bl	80034e8 <setFIFOAverage>

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 800363e:	f7ff ff7f 	bl	8003540 <enableFIFORollover>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 8003642:	797b      	ldrb	r3, [r7, #5]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d103      	bne.n	8003650 <setup+0x84>
 8003648:	2007      	movs	r0, #7
 800364a:	f7ff fe8b 	bl	8003364 <setLEDMode>
 800364e:	e009      	b.n	8003664 <setup+0x98>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 8003650:	797b      	ldrb	r3, [r7, #5]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d103      	bne.n	800365e <setup+0x92>
 8003656:	2003      	movs	r0, #3
 8003658:	f7ff fe84 	bl	8003364 <setLEDMode>
 800365c:	e002      	b.n	8003664 <setup+0x98>
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 800365e:	2002      	movs	r0, #2
 8003660:	f7ff fe80 	bl	8003364 <setLEDMode>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <setup+0x1fc>)
 8003666:	797b      	ldrb	r3, [r7, #5]
 8003668:	7013      	strb	r3, [r2, #0]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	da03      	bge.n	800367a <setup+0xae>
 8003672:	2000      	movs	r0, #0
 8003674:	f7ff fe85 	bl	8003382 <setADCRange>
 8003678:	e01a      	b.n	80036b0 <setup+0xe4>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003680:	da03      	bge.n	800368a <setup+0xbe>
 8003682:	2020      	movs	r0, #32
 8003684:	f7ff fe7d 	bl	8003382 <setADCRange>
 8003688:	e012      	b.n	80036b0 <setup+0xe4>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003690:	da03      	bge.n	800369a <setup+0xce>
 8003692:	2040      	movs	r0, #64	; 0x40
 8003694:	f7ff fe75 	bl	8003382 <setADCRange>
 8003698:	e00a      	b.n	80036b0 <setup+0xe4>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a0:	d103      	bne.n	80036aa <setup+0xde>
 80036a2:	2060      	movs	r0, #96	; 0x60
 80036a4:	f7ff fe6d 	bl	8003382 <setADCRange>
 80036a8:	e002      	b.n	80036b0 <setup+0xe4>
  else setADCRange(MAX30105_ADCRANGE_2048);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7ff fe69 	bl	8003382 <setADCRange>

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b63      	cmp	r3, #99	; 0x63
 80036b4:	dc03      	bgt.n	80036be <setup+0xf2>
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7ff fe72 	bl	80033a0 <setSampleRate>
 80036bc:	e039      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2bc7      	cmp	r3, #199	; 0xc7
 80036c2:	dc03      	bgt.n	80036cc <setup+0x100>
 80036c4:	2004      	movs	r0, #4
 80036c6:	f7ff fe6b 	bl	80033a0 <setSampleRate>
 80036ca:	e032      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80036d2:	da03      	bge.n	80036dc <setup+0x110>
 80036d4:	2008      	movs	r0, #8
 80036d6:	f7ff fe63 	bl	80033a0 <setSampleRate>
 80036da:	e02a      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80036e2:	da03      	bge.n	80036ec <setup+0x120>
 80036e4:	200c      	movs	r0, #12
 80036e6:	f7ff fe5b 	bl	80033a0 <setSampleRate>
 80036ea:	e022      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f2:	da03      	bge.n	80036fc <setup+0x130>
 80036f4:	2010      	movs	r0, #16
 80036f6:	f7ff fe53 	bl	80033a0 <setSampleRate>
 80036fa:	e01a      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003702:	da03      	bge.n	800370c <setup+0x140>
 8003704:	2014      	movs	r0, #20
 8003706:	f7ff fe4b 	bl	80033a0 <setSampleRate>
 800370a:	e012      	b.n	8003732 <setup+0x166>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003712:	da03      	bge.n	800371c <setup+0x150>
 8003714:	2018      	movs	r0, #24
 8003716:	f7ff fe43 	bl	80033a0 <setSampleRate>
 800371a:	e00a      	b.n	8003732 <setup+0x166>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003722:	d103      	bne.n	800372c <setup+0x160>
 8003724:	201c      	movs	r0, #28
 8003726:	f7ff fe3b 	bl	80033a0 <setSampleRate>
 800372a:	e002      	b.n	8003732 <setup+0x166>
  else setSampleRate(MAX30105_SAMPLERATE_50);
 800372c:	2000      	movs	r0, #0
 800372e:	f7ff fe37 	bl	80033a0 <setSampleRate>

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b75      	cmp	r3, #117	; 0x75
 8003736:	dc03      	bgt.n	8003740 <setup+0x174>
 8003738:	2000      	movs	r0, #0
 800373a:	f7ff fe40 	bl	80033be <setPulseWidth>
 800373e:	e01a      	b.n	8003776 <setup+0x1aa>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2bd6      	cmp	r3, #214	; 0xd6
 8003744:	dc03      	bgt.n	800374e <setup+0x182>
 8003746:	2001      	movs	r0, #1
 8003748:	f7ff fe39 	bl	80033be <setPulseWidth>
 800374c:	e013      	b.n	8003776 <setup+0x1aa>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003754:	dc03      	bgt.n	800375e <setup+0x192>
 8003756:	2002      	movs	r0, #2
 8003758:	f7ff fe31 	bl	80033be <setPulseWidth>
 800375c:	e00b      	b.n	8003776 <setup+0x1aa>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f240 129b 	movw	r2, #411	; 0x19b
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <setup+0x1a4>
 8003768:	2003      	movs	r0, #3
 800376a:	f7ff fe28 	bl	80033be <setPulseWidth>
 800376e:	e002      	b.n	8003776 <setup+0x1aa>
  else setPulseWidth(MAX30105_PULSEWIDTH_69);
 8003770:	2000      	movs	r0, #0
 8003772:	f7ff fe24 	bl	80033be <setPulseWidth>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fe2f 	bl	80033dc <setPulseAmplitudeRed>
  setPulseAmplitudeIR(powerLevel);
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fe3d 	bl	8003400 <setPulseAmplitudeIR>
  setPulseAmplitudeGreen(powerLevel);
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fe4b 	bl	8003424 <setPulseAmplitudeGreen>
  setPulseAmplitudeProximity(powerLevel);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe59 	bl	8003448 <setPulseAmplitudeProximity>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
 8003796:	2101      	movs	r1, #1
 8003798:	2001      	movs	r0, #1
 800379a:	f7ff fe67 	bl	800346c <enableSlot>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 800379e:	797b      	ldrb	r3, [r7, #5]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d903      	bls.n	80037ac <setup+0x1e0>
 80037a4:	2102      	movs	r1, #2
 80037a6:	2002      	movs	r0, #2
 80037a8:	f7ff fe60 	bl	800346c <enableSlot>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d903      	bls.n	80037ba <setup+0x1ee>
 80037b2:	2103      	movs	r1, #3
 80037b4:	2003      	movs	r0, #3
 80037b6:	f7ff fe59 	bl	800346c <enableSlot>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80037ba:	f7ff fea5 	bl	8003508 <clearFIFO>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000008c 	.word	0x2000008c

080037cc <getRed>:
  return (numberOfSamples);
}

//Report the most recent red value
uint32_t getRed(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80037d0:	20fa      	movs	r0, #250	; 0xfa
 80037d2:	f000 f919 	bl	8003a08 <safeCheck>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <getRed+0x20>
    return (sense.red[sense.head]);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <getRed+0x28>)
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <getRed+0x28>)
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	e000      	b.n	80037ee <getRed+0x22>
  else
    return(0); //Sensor failed to find new data
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000090 	.word	0x20000090

080037f8 <check>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t check(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b0b6      	sub	sp, #216	; 0xd8
 80037fc:	af04      	add	r7, sp, #16
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  uint8_t readPointer = getReadPointer();
 80037fe:	f7ff feb7 	bl	8003570 <getReadPointer>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
  uint8_t writePointer = getWritePointer();
 8003808:	f7ff fea4 	bl	8003554 <getWritePointer>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

  int numberOfSamples = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  //Do we have new data?
  if (readPointer != writePointer)
 8003818:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800381c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8003820:	429a      	cmp	r2, r3
 8003822:	f000 80e1 	beq.w	80039e8 <check+0x1f0>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
 8003826:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 800382a:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003838:	2b00      	cmp	r3, #0
 800383a:	da04      	bge.n	8003846 <check+0x4e>
 800383c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003840:	3320      	adds	r3, #32
 8003842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <check+0x200>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003850:	fb03 f202 	mul.w	r2, r3, r2
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    //Get ready to read a burst of data from the FIFO register
    if (bytesLeftToRead > I2C_BUFFER_LENGTH)
 800385e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003862:	2b20      	cmp	r3, #32
 8003864:	dd0f      	ble.n	8003886 <check+0x8e>
    {
    	//If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        bytesLeftToRead = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 8003866:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <check+0x200>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	2220      	movs	r2, #32
 8003874:	fb92 f1f3 	sdiv	r1, r2, r3
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f1c3 0320 	rsb	r3, r3, #32
 8003882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    }
    uint8_t buff[180]={0};
 8003886:	2300      	movs	r3, #0
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	22b0      	movs	r2, #176	; 0xb0
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f977 	bl	8003b84 <memset>
    HAL_I2C_Mem_Read(&hi2c1, ((_i2caddr<<1)|1), MAX30105_FIFODATA, I2C_MEMADD_SIZE_8BIT, buff, bytesLeftToRead, 1000);
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <check+0x204>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	b21b      	sxth	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b21b      	sxth	r3, r3
 80038a4:	b299      	uxth	r1, r3
 80038a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038b0:	9202      	str	r2, [sp, #8]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	463b      	mov	r3, r7
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2301      	movs	r3, #1
 80038ba:	2207      	movs	r2, #7
 80038bc:	4850      	ldr	r0, [pc, #320]	; (8003a00 <check+0x208>)
 80038be:	f7fd fb35 	bl	8000f2c <HAL_I2C_Mem_Read>
    uint8_t counter;
    while(bytesLeftToRead){
 80038c2:	e08c      	b.n	80039de <check+0x1e6>
        sense.head++; //Advance the head of the storage struct
 80038c4:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <check+0x20c>)
 80038c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ca:	3301      	adds	r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <check+0x20c>)
 80038d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        sense.head %= STORAGE_SIZE; //Wrap condition
 80038d4:	4b4b      	ldr	r3, [pc, #300]	; (8003a04 <check+0x20c>)
 80038d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <check+0x20c>)
 80038e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        uint8_t temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        temp[2] = buff[counter++];
 80038ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 80038f6:	33c8      	adds	r3, #200	; 0xc8
 80038f8:	443b      	add	r3, r7
 80038fa:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 80038fe:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
        temp[1] = buff[counter++];
 8003902:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 800390c:	33c8      	adds	r3, #200	; 0xc8
 800390e:	443b      	add	r3, r7
 8003910:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8003914:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
        temp[0] = buff[counter++];
 8003918:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8003922:	33c8      	adds	r3, #200	; 0xc8
 8003924:	443b      	add	r3, r7
 8003926:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 800392a:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 800392e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
 8003932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 8003936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800393e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <check+0x20c>)
 8003944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003948:	4619      	mov	r1, r3
 800394a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800394e:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <check+0x20c>)
 8003950:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        if (activeLEDs > 1)
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <check+0x200>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d936      	bls.n	80039ca <check+0x1d2>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
          temp[2] = buff[counter++];
 8003962:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 800396c:	33c8      	adds	r3, #200	; 0xc8
 800396e:	443b      	add	r3, r7
 8003970:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8003974:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
          temp[1] = buff[counter++];
 8003978:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8003982:	33c8      	adds	r3, #200	; 0xc8
 8003984:	443b      	add	r3, r7
 8003986:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 800398a:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
          temp[0] = buff[counter++];
 800398e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8003998:	33c8      	adds	r3, #200	; 0xc8
 800399a:	443b      	add	r3, r7
 800399c:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 80039a0:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 80039a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80039ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039b0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		  sense.IR[sense.head] = tempLong;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <check+0x20c>)
 80039ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039c2:	4910      	ldr	r1, [pc, #64]	; (8003a04 <check+0x20c>)
 80039c4:	3304      	adds	r3, #4
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }


        bytesLeftToRead -= (activeLEDs * 3);
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <check+0x200>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039d8:	4413      	add	r3, r2
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    while(bytesLeftToRead){
 80039de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f47f af6e 	bne.w	80038c4 <check+0xcc>
    }


  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
 80039e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ec:	b29b      	uxth	r3, r3
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	37c8      	adds	r7, #200	; 0xc8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000008c 	.word	0x2000008c
 80039fc:	20000011 	.word	0x20000011
 8003a00:	20000030 	.word	0x20000030
 8003a04:	20000090 	.word	0x20000090

08003a08 <safeCheck>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
uint8_t safeCheck(uint8_t maxTimeToCheck)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  uint32_t markTime = HAL_GetTick();
 8003a12:	f7fc fe57 	bl	80006c4 <HAL_GetTick>
 8003a16:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	if(HAL_GetTick() - markTime > maxTimeToCheck) return(false);
 8003a18:	f7fc fe54 	bl	80006c4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d901      	bls.n	8003a2c <safeCheck+0x24>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e00a      	b.n	8003a42 <safeCheck+0x3a>

	if(check() == true) //We found new data!
 8003a2c:	f7ff fee4 	bl	80037f8 <check>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <safeCheck+0x32>
	  return(true);
 8003a36:	2301      	movs	r3, #1
 8003a38:	e003      	b.n	8003a42 <safeCheck+0x3a>

	HAL_Delay(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7fc fe5a 	bl	80006f4 <HAL_Delay>
	if(HAL_GetTick() - markTime > maxTimeToCheck) return(false);
 8003a40:	e7ea      	b.n	8003a18 <safeCheck+0x10>
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <bitMask>:


void bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
 8003a56:	460b      	mov	r3, r1
 8003a58:	71bb      	strb	r3, [r7, #6]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	717b      	strb	r3, [r7, #5]
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <bitMask+0x48>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	79fa      	ldrb	r2, [r7, #7]
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f816 	bl	8003a98 <readRegister8>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  originalContents = originalContents & mask;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	79bb      	ldrb	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	73fb      	strb	r3, [r7, #15]
  writeRegister8(_i2caddr, reg, originalContents | thing);
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <bitMask+0x48>)
 8003a7a:	7818      	ldrb	r0, [r3, #0]
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	797b      	ldrb	r3, [r7, #5]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	4619      	mov	r1, r3
 8003a88:	f000 f832 	bl	8003af0 <writeRegister8>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000011 	.word	0x20000011

08003a98 <readRegister8>:

uint8_t readRegister8(uint8_t address, uint8_t reg) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
  if(HAL_I2C_Mem_Read(&hi2c1, ((_i2caddr<<1)|1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000)==HAL_OK)
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <readRegister8+0x50>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	b299      	uxth	r1, r3
 8003ab8:	79bb      	ldrb	r3, [r7, #6]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	f107 030f 	add.w	r3, r7, #15
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2301      	movs	r3, #1
 8003ace:	4807      	ldr	r0, [pc, #28]	; (8003aec <readRegister8+0x54>)
 8003ad0:	f7fd fa2c 	bl	8000f2c <HAL_I2C_Mem_Read>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <readRegister8+0x46>
	  return data;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	e000      	b.n	8003ae0 <readRegister8+0x48>
  return (0); //Fail
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000011 	.word	0x20000011
 8003aec:	20000030 	.word	0x20000030

08003af0 <writeRegister8>:

void writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
 8003afa:	460b      	mov	r3, r1
 8003afc:	71bb      	strb	r3, [r7, #6]
 8003afe:	4613      	mov	r3, r2
 8003b00:	717b      	strb	r3, [r7, #5]
	uint8_t temp = value;
 8003b02:	797b      	ldrb	r3, [r7, #5]
 8003b04:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, (_i2caddr<<1), reg, I2C_MEMADD_SIZE_8BIT, &temp, 1, 1000);
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <writeRegister8+0x44>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	f107 030f 	add.w	r3, r7, #15
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2301      	movs	r3, #1
 8003b26:	4804      	ldr	r0, [pc, #16]	; (8003b38 <writeRegister8+0x48>)
 8003b28:	f7fd f8ec 	bl	8000d04 <HAL_I2C_Mem_Write>
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000011 	.word	0x20000011
 8003b38:	20000030 	.word	0x20000030

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	; (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	; (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <__libc_init_array+0x44>)
 8003b50:	f000 f820 	bl	8003b94 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08003c58 	.word	0x08003c58
 8003b78:	08003c58 	.word	0x08003c58
 8003b7c:	08003c58 	.word	0x08003c58
 8003b80:	08003c5c 	.word	0x08003c5c

08003b84 <memset>:
 8003b84:	4402      	add	r2, r0
 8003b86:	4603      	mov	r3, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
